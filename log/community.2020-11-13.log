Starting CommunityApplication on DESKTOP-QPE2857 with PID 19940 (started by 北极光。 in D:\编程\community)
No active profile set, falling back to default profiles: default
Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
Multiple Spring Data modules found, entering strict repository configuration mode!
Bootstrapping Spring Data repositories in DEFAULT mode.
Finished Spring Data repository scanning in 52ms. Found 1 repository interfaces.
Multiple Spring Data modules found, entering strict repository configuration mode!
Bootstrapping Spring Data repositories in DEFAULT mode.
Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.bilibili.mapper.ElasticsearchMapper.
Finished Spring Data repository scanning in 6ms. Found 0 repository interfaces.
Bean 'org.springframework.kafka.annotation.KafkaBootstrapConfiguration' of type [org.springframework.kafka.annotation.KafkaBootstrapConfiguration$$EnhancerBySpringCGLIB$$7d5b9ea7] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$a9a98d24] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Tomcat initialized with port(s): 8989 (http)
Initializing ProtocolHandler ["http-nio-8989"]
Starting service [Tomcat]
Starting Servlet engine: [Apache Tomcat/9.0.19]
Loaded APR based Apache Tomcat Native library [1.2.23] using APR version [1.7.0].
APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].
APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
OpenSSL successfully initialized [OpenSSL 1.1.1c  28 May 2019]
Initializing Spring embedded WebApplicationContext
Root WebApplicationContext: initialization completed in 2573 ms
no modules loaded
loaded plugin [org.elasticsearch.index.reindex.ReindexPlugin]
loaded plugin [org.elasticsearch.join.ParentJoinPlugin]
loaded plugin [org.elasticsearch.percolator.PercolatorPlugin]
loaded plugin [org.elasticsearch.script.mustache.MustachePlugin]
loaded plugin [org.elasticsearch.transport.Netty4Plugin]
Adding transport node : 127.0.0.1:9300
LiveReload server is running on port 35729
Initializing ExecutorService 'applicationTaskExecutor'
Adding welcome page template: index


Using generated security password: 7f2100ae-557f-4f5a-a935-00496b1e0716

Creating filter chain: Ant [pattern='/resources/**'], []
Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@33e39ba0, org.springframework.security.web.context.SecurityContextPersistenceFilter@320ca0cb, org.springframework.security.web.header.HeaderWriterFilter@74a3165c, org.springframework.security.web.authentication.logout.LogoutFilter@41fa507a, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@5cbe4fc2, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@79b5c6e7, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@5d83efe3, org.springframework.security.web.session.SessionManagementFilter@60738418, org.springframework.security.web.access.ExceptionTranslationFilter@39e53457, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@1ae840b]
ConsumerConfig values: 
	auto.commit.interval.ms = 3000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.id = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = true
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = community-consumer-group
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	session.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

Kafka version : 2.0.1
Kafka commitId : fa14705e51bd2ce5
[Consumer clientId=consumer-1, groupId=community-consumer-group] Connection to node -1 could not be established. Broker may not be available.
[Consumer clientId=consumer-1, groupId=community-consumer-group] Connection to node -1 could not be established. Broker may not be available.
[Consumer clientId=consumer-1, groupId=community-consumer-group] Connection to node -1 could not be established. Broker may not be available.
[Consumer clientId=consumer-1, groupId=community-consumer-group] Connection to node -1 could not be established. Broker may not be available.
[Consumer clientId=consumer-1, groupId=community-consumer-group] Connection to node -1 could not be established. Broker may not be available.
[Consumer clientId=consumer-1, groupId=community-consumer-group] Connection to node -1 could not be established. Broker may not be available.
[Consumer clientId=consumer-1, groupId=community-consumer-group] Connection to node -1 could not be established. Broker may not be available.
[Consumer clientId=consumer-1, groupId=community-consumer-group] Connection to node -1 could not be established. Broker may not be available.
[Consumer clientId=consumer-1, groupId=community-consumer-group] Connection to node -1 could not be established. Broker may not be available.
[Consumer clientId=consumer-1, groupId=community-consumer-group] Connection to node -1 could not be established. Broker may not be available.
[Consumer clientId=consumer-1, groupId=community-consumer-group] Connection to node -1 could not be established. Broker may not be available.
[Consumer clientId=consumer-1, groupId=community-consumer-group] Connection to node -1 could not be established. Broker may not be available.
[Consumer clientId=consumer-1, groupId=community-consumer-group] Connection to node -1 could not be established. Broker may not be available.
[Consumer clientId=consumer-1, groupId=community-consumer-group] Connection to node -1 could not be established. Broker may not be available.
[Consumer clientId=consumer-1, groupId=community-consumer-group] Connection to node -1 could not be established. Broker may not be available.
[Consumer clientId=consumer-1, groupId=community-consumer-group] Connection to node -1 could not be established. Broker may not be available.
[Consumer clientId=consumer-1, groupId=community-consumer-group] Connection to node -1 could not be established. Broker may not be available.
[Consumer clientId=consumer-1, groupId=community-consumer-group] Connection to node -1 could not be established. Broker may not be available.
[Consumer clientId=consumer-1, groupId=community-consumer-group] Connection to node -1 could not be established. Broker may not be available.
[Consumer clientId=consumer-1, groupId=community-consumer-group] Connection to node -1 could not be established. Broker may not be available.
[Consumer clientId=consumer-1, groupId=community-consumer-group] Connection to node -1 could not be established. Broker may not be available.
Exception encountered during context initialization - cancelling refresh attempt: org.springframework.context.ApplicationContextException: Failed to start bean 'org.springframework.kafka.config.internalKafkaListenerEndpointRegistry'; nested exception is org.apache.kafka.common.errors.TimeoutException: Timeout expired while fetching topic metadata
Shutting down ExecutorService 'applicationTaskExecutor'
{dataSource-0} closing ...
Stopping service [Tomcat]


Error starting ApplicationContext. To display the conditions report re-run your application with 'debug' enabled.
Application run failed
org.springframework.context.ApplicationContextException: Failed to start bean 'org.springframework.kafka.config.internalKafkaListenerEndpointRegistry'; nested exception is org.apache.kafka.common.errors.TimeoutException: Timeout expired while fetching topic metadata
	at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:185)
	at org.springframework.context.support.DefaultLifecycleProcessor.access$200(DefaultLifecycleProcessor.java:53)
	at org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.start(DefaultLifecycleProcessor.java:360)
	at org.springframework.context.support.DefaultLifecycleProcessor.startBeans(DefaultLifecycleProcessor.java:158)
	at org.springframework.context.support.DefaultLifecycleProcessor.onRefresh(DefaultLifecycleProcessor.java:122)
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:893)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.finishRefresh(ServletWebServerApplicationContext.java:163)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:552)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:142)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:775)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:316)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1260)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1248)
	at com.bilibili.CommunityApplication.main(CommunityApplication.java:12)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.apache.kafka.common.errors.TimeoutException: Timeout expired while fetching topic metadata
Starting CommunityApplication on DESKTOP-QPE2857 with PID 484 (started by 北极光。 in D:\编程\community)
No active profile set, falling back to default profiles: default
Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
Multiple Spring Data modules found, entering strict repository configuration mode!
Bootstrapping Spring Data repositories in DEFAULT mode.
Finished Spring Data repository scanning in 59ms. Found 1 repository interfaces.
Multiple Spring Data modules found, entering strict repository configuration mode!
Bootstrapping Spring Data repositories in DEFAULT mode.
Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.bilibili.mapper.ElasticsearchMapper.
Finished Spring Data repository scanning in 7ms. Found 0 repository interfaces.
Bean 'org.springframework.kafka.annotation.KafkaBootstrapConfiguration' of type [org.springframework.kafka.annotation.KafkaBootstrapConfiguration$$EnhancerBySpringCGLIB$$5b731df8] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$87c10c75] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Tomcat initialized with port(s): 8989 (http)
Initializing ProtocolHandler ["http-nio-8989"]
Starting service [Tomcat]
Starting Servlet engine: [Apache Tomcat/9.0.19]
Loaded APR based Apache Tomcat Native library [1.2.23] using APR version [1.7.0].
APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].
APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
OpenSSL successfully initialized [OpenSSL 1.1.1c  28 May 2019]
Initializing Spring embedded WebApplicationContext
Root WebApplicationContext: initialization completed in 1560 ms
no modules loaded
loaded plugin [org.elasticsearch.index.reindex.ReindexPlugin]
loaded plugin [org.elasticsearch.join.ParentJoinPlugin]
loaded plugin [org.elasticsearch.percolator.PercolatorPlugin]
loaded plugin [org.elasticsearch.script.mustache.MustachePlugin]
loaded plugin [org.elasticsearch.transport.Netty4Plugin]
Adding transport node : 127.0.0.1:9300
LiveReload server is running on port 35729
Initializing ExecutorService 'applicationTaskExecutor'
Adding welcome page template: index


Using generated security password: 63094b89-e697-49d5-98f7-c8238e9ece39

Creating filter chain: Ant [pattern='/resources/**'], []
Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@5ad0434d, org.springframework.security.web.context.SecurityContextPersistenceFilter@348f7e5c, org.springframework.security.web.header.HeaderWriterFilter@78d5a474, org.springframework.security.web.authentication.logout.LogoutFilter@2b6cd7f2, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@13ffaf5a, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@7946b636, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@68abce06, org.springframework.security.web.session.SessionManagementFilter@552b5d47, org.springframework.security.web.access.ExceptionTranslationFilter@758d8632, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@65295a0]
ConsumerConfig values: 
	auto.commit.interval.ms = 3000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.id = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = true
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = community-consumer-group
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	session.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

Kafka version : 2.0.1
Kafka commitId : fa14705e51bd2ce5
Cluster ID: PlpdobZhSsWqjkg6yvKfBA
ConsumerConfig values: 
	auto.commit.interval.ms = 3000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.id = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = true
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = community-consumer-group
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	session.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

Kafka version : 2.0.1
Kafka commitId : fa14705e51bd2ce5
Initializing ExecutorService
ConsumerConfig values: 
	auto.commit.interval.ms = 3000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.id = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = true
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = community-consumer-group
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	session.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

Kafka version : 2.0.1
Kafka commitId : fa14705e51bd2ce5
Cluster ID: PlpdobZhSsWqjkg6yvKfBA
Cluster ID: PlpdobZhSsWqjkg6yvKfBA
[Consumer clientId=consumer-2, groupId=community-consumer-group] Discovered group coordinator DESKTOP-QPE2857:9092 (id: 2147483647 rack: null)
ConsumerConfig values: 
	auto.commit.interval.ms = 3000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.id = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = true
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = community-consumer-group
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	session.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

[Consumer clientId=consumer-2, groupId=community-consumer-group] Revoking previously assigned partitions []
partitions revoked: []
[Consumer clientId=consumer-2, groupId=community-consumer-group] (Re-)joining group
Kafka version : 2.0.1
Kafka commitId : fa14705e51bd2ce5
Initializing ExecutorService
ConsumerConfig values: 
	auto.commit.interval.ms = 3000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.id = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = true
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = community-consumer-group
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	session.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

Cluster ID: PlpdobZhSsWqjkg6yvKfBA
Kafka version : 2.0.1
Kafka commitId : fa14705e51bd2ce5
Cluster ID: PlpdobZhSsWqjkg6yvKfBA
[Consumer clientId=consumer-4, groupId=community-consumer-group] Discovered group coordinator DESKTOP-QPE2857:9092 (id: 2147483647 rack: null)
[Consumer clientId=consumer-4, groupId=community-consumer-group] Revoking previously assigned partitions []
partitions revoked: []
[Consumer clientId=consumer-4, groupId=community-consumer-group] (Re-)joining group
[Consumer clientId=consumer-2, groupId=community-consumer-group] Successfully joined group with generation 95
[Consumer clientId=consumer-4, groupId=community-consumer-group] Successfully joined group with generation 95
[Consumer clientId=consumer-2, groupId=community-consumer-group] Setting newly assigned partitions [publish-0]
[Consumer clientId=consumer-4, groupId=community-consumer-group] Setting newly assigned partitions [comment-0, like-0, follow-0]
partitions assigned: [publish-0]
partitions assigned: [comment-0, like-0, follow-0]
ConsumerConfig values: 
	auto.commit.interval.ms = 3000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.id = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = true
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = community-consumer-group
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	session.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

Kafka version : 2.0.1
Kafka commitId : fa14705e51bd2ce5
Initializing ExecutorService
Cluster ID: PlpdobZhSsWqjkg6yvKfBA
[Consumer clientId=consumer-6, groupId=community-consumer-group] Discovered group coordinator DESKTOP-QPE2857:9092 (id: 2147483647 rack: null)
[Consumer clientId=consumer-6, groupId=community-consumer-group] Revoking previously assigned partitions []
partitions revoked: []
[Consumer clientId=consumer-6, groupId=community-consumer-group] (Re-)joining group
Starting ProtocolHandler ["http-nio-8989"]
Tomcat started on port(s): 8989 (http) with context path '/community'
Started CommunityApplication in 6.544 seconds (JVM running for 7.606)
[Consumer clientId=consumer-4, groupId=community-consumer-group] Attempt to heartbeat failed since group is rebalancing
[Consumer clientId=consumer-2, groupId=community-consumer-group] Attempt to heartbeat failed since group is rebalancing
[Consumer clientId=consumer-2, groupId=community-consumer-group] Revoking previously assigned partitions [publish-0]
partitions revoked: [publish-0]
[Consumer clientId=consumer-2, groupId=community-consumer-group] (Re-)joining group
[Consumer clientId=consumer-4, groupId=community-consumer-group] Revoking previously assigned partitions [comment-0, like-0, follow-0]
partitions revoked: [comment-0, like-0, follow-0]
[Consumer clientId=consumer-4, groupId=community-consumer-group] (Re-)joining group
[Consumer clientId=consumer-6, groupId=community-consumer-group] Successfully joined group with generation 96
[Consumer clientId=consumer-6, groupId=community-consumer-group] Setting newly assigned partitions [delete-0]
[Consumer clientId=consumer-2, groupId=community-consumer-group] Successfully joined group with generation 96
[Consumer clientId=consumer-4, groupId=community-consumer-group] Successfully joined group with generation 96
[Consumer clientId=consumer-2, groupId=community-consumer-group] Setting newly assigned partitions [publish-0]
[Consumer clientId=consumer-4, groupId=community-consumer-group] Setting newly assigned partitions [comment-0, like-0, follow-0]
partitions assigned: [publish-0]
partitions assigned: [comment-0, like-0, follow-0]
[Consumer clientId=consumer-6, groupId=community-consumer-group] Resetting offset for partition delete-0 to offset 0.
partitions assigned: [delete-0]
Initializing Spring DispatcherServlet 'dispatcherServlet'
Initializing Servlet 'dispatcherServlet'
Completed initialization in 8 ms
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:09],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.findAllDiscussPost].
{dataSource-1} inited
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:09],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
Starting without optional epoll library
Starting without optional kqueue library
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:10],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:10],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:10],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:10],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:10],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:10],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:10],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:10],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:10],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:10],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:10],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:10],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:10],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:10],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:10],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:10],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:10],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:10],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:10],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:10],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:10],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:10],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:10],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:10],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:10],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:10],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:10],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:10],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:10],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:14],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.getDiscussPostById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:14],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:14],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:14],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:14],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:14],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:14],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:14],访问了[com.bilibili.service.impl.CommentServiceImpl.CommentCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:14],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:14],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:14],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:14],访问了[com.bilibili.service.impl.CommentServiceImpl.CommentCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:14],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:14],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:14],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:14],访问了[com.bilibili.service.impl.CommentServiceImpl.CommentCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:14],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:14],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:14],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:14],访问了[com.bilibili.service.impl.CommentServiceImpl.CommentCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:14],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:14],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:14],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:14],访问了[com.bilibili.service.impl.CommentServiceImpl.CommentCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:19],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.findAllDiscussPost].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:19],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:19],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:19],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:19],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:19],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:19],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:19],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:19],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:19],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:19],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:19],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:19],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:19],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:19],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:19],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:19],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:19],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:19],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:19],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:19],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:19],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:19],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:19],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:19],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:19],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:19],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:19],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:19],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:19],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:19],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:27],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.findAllDiscussPost].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:27],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:27],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:27],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:27],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:27],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:27],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:27],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:27],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:27],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:27],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:27],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:27],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:27],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:27],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:27],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:27],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:27],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:27],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:27],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:27],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:27],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:27],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:27],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:27],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:27],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:27],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:27],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:27],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:27],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:09:27],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:25],访问了[com.bilibili.service.impl.UserServiceImpl.login].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:25],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:25],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:25],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.findAllDiscussPost].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:25],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:25],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:25],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:25],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:25],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:25],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:25],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:25],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:25],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:25],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:25],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:25],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:25],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:25],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:25],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:25],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:25],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:25],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:25],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:25],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:25],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:25],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:25],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:25],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:25],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:25],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:25],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:25],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:25],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:25],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:25],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:25],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:25],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:25],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:25],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:25],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:25],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:25],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:25],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:25],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:25],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:25],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:25],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:25],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:25],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:25],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:25],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:28],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:28],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:28],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.getDiscussPostById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:28],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:28],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:28],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:28],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:28],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:28],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:28],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:28],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:28],访问了[com.bilibili.service.impl.CommentServiceImpl.CommentCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:28],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:28],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:28],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:28],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:28],访问了[com.bilibili.service.impl.CommentServiceImpl.CommentCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:28],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:28],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:28],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:28],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:28],访问了[com.bilibili.service.impl.CommentServiceImpl.CommentCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:28],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:28],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:28],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:28],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:28],访问了[com.bilibili.service.impl.CommentServiceImpl.CommentCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:28],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:28],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:28],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:28],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:28],访问了[com.bilibili.service.impl.CommentServiceImpl.CommentCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:28],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:28],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:30],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:30],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:30],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.findAllDiscussPost].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:30],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:30],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:30],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:30],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:30],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:30],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:30],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:30],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:30],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:30],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:30],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:30],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:30],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:30],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:30],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:30],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:30],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:30],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:30],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:30],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:30],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:30],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:30],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:30],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:30],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:30],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:30],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:30],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:30],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:30],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:30],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:30],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:30],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:30],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:30],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:30],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:30],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:30],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:30],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:30],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:30],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:30],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:30],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:30],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:30],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:30],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:30],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:35],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:35],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:35],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.getDiscussPostById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:35],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:35],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:35],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:35],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:35],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:35],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:35],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:35],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:35],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:35],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:35],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:35],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:35],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:35],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:35],访问了[com.bilibili.service.impl.CommentServiceImpl.CommentCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:35],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:35],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:35],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:35],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:35],访问了[com.bilibili.service.impl.CommentServiceImpl.CommentCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:35],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:35],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:35],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:35],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:35],访问了[com.bilibili.service.impl.CommentServiceImpl.CommentCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:35],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:35],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:35],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:35],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:35],访问了[com.bilibili.service.impl.CommentServiceImpl.CommentCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:35],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:35],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:35],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:35],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:35],访问了[com.bilibili.service.impl.CommentServiceImpl.CommentCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:35],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:35],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:37],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:37],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:37],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.findAllDiscussPost].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:37],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:37],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:37],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:37],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:37],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:37],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:37],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:37],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:37],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:37],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:37],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:37],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:37],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:37],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:37],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:37],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:37],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:37],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:37],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:37],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:37],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:37],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:37],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:37],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:37],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:37],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:37],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:37],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:37],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:37],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:37],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:37],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:37],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:37],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:37],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:37],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:37],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:37],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:37],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:37],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:37],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:37],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:37],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:37],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:37],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:37],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:10:37],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:11:33],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:11:33],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:11:33],访问了[com.bilibili.service.impl.UserServiceImpl.logout].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:11:33],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:11:33],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:11:33],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:11:33],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:20],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:24],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:24],访问了[com.bilibili.service.impl.UserServiceImpl.login].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:24],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:24],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:24],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.findAllDiscussPost].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:24],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:24],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:24],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:24],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:24],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:24],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:24],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:24],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:24],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:24],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:24],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:24],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:24],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:24],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:24],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:24],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:24],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:24],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:24],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:24],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:24],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:24],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:24],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:24],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:24],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:24],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:24],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:24],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:24],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:24],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:24],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:24],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:24],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:24],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:24],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:24],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:24],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:24],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:24],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:24],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:24],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:24],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:24],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:24],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:24],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:24],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:24],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:26],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:26],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:26],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:26],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:26],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:26],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:31],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:31],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:31],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:31],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:31],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:31],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:32],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:32],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:32],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.findAllDiscussPost].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:32],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:32],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:32],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:32],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:32],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:32],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:32],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:32],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:32],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:32],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:32],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:32],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:32],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:32],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:32],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:32],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:32],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:32],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:32],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:32],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:32],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:32],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:32],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:32],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:32],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:32],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:32],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:32],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:32],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:32],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:32],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:32],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:32],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:32],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:32],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:32],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:32],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:32],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:32],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:32],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:32],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:32],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:32],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:32],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:32],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:32],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:32],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:36],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:36],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:36],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:36],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:36],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:36],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:39],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:39],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:39],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.findAllDiscussPost].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:39],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:39],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:39],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:39],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:39],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:39],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:39],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:39],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:39],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:39],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:39],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:39],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:39],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:39],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:39],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:39],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:39],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:39],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:39],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:39],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:39],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:39],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:39],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:39],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:39],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:39],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:39],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:39],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:39],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:39],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:39],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:39],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:39],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:39],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:39],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:39],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:39],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:39],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:39],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:39],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:39],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:39],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:39],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:39],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:39],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:39],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:39],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:42],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:42],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:42],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.getDiscussPostById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:42],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:42],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:42],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:42],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:42],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:42],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:42],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:42],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:42],访问了[com.bilibili.service.impl.CommentServiceImpl.CommentCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:42],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:42],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:42],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:42],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:42],访问了[com.bilibili.service.impl.CommentServiceImpl.CommentCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:42],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:42],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:42],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:42],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:42],访问了[com.bilibili.service.impl.CommentServiceImpl.CommentCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:42],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:42],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:42],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:42],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:42],访问了[com.bilibili.service.impl.CommentServiceImpl.CommentCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:42],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:42],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:42],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:42],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:42],访问了[com.bilibili.service.impl.CommentServiceImpl.CommentCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:42],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:42],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:43],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:43],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:43],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.findAllDiscussPost].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:43],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:43],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:43],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:43],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:43],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:43],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:43],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:43],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:43],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:43],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:43],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:43],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:43],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:43],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:43],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:43],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:43],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:43],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:43],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:43],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:43],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:43],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:43],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:43],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:43],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:43],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:43],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:43],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:43],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:43],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:43],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:43],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:43],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:43],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:43],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:43],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:43],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:43],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:43],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:43],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:43],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:43],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:43],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:43],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:43],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:43],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:43],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:44],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:44],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:44],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.getDiscussPostById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:44],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:44],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:44],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:44],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:44],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:44],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:46],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:46],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:46],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.findAllDiscussPost].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:46],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:46],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:46],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:46],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:46],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:46],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:46],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:46],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:46],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:46],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:46],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:46],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:46],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:46],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:46],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:46],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:46],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:46],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:46],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:46],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:46],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:46],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:46],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:46],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:46],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:46],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:46],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:46],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:46],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:46],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:46],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:46],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:46],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:46],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:46],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:46],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:46],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:46],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:46],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:46],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:46],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:46],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:46],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:46],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:46],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:46],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:46],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:49],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:49],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:49],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:49],访问了[com.bilibili.service.impl.LickServiceImpl.userLikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:49],访问了[com.bilibili.service.impl.FollowServiceImpl.FolloweeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:49],访问了[com.bilibili.service.impl.FollowServiceImpl.FollowersCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:49],访问了[com.bilibili.service.impl.FollowServiceImpl.isFollow].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:49],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:49],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:53],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:53],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
服务器异常：Failed to convert value of type 'java.lang.String' to required type 'java.lang.Integer'; nested exception is java.lang.NumberFormatException: For input string: "my-post.html"
org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:132)
org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:126)
org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:167)
org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:134)
org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897)
javax.servlet.http.HttpServlet.service(HttpServlet.java:634)
org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:357)
org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:270)
org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:836)
org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1747)
org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
java.lang.Thread.run(Thread.java:748)
Resolved [org.springframework.web.method.annotation.MethodArgumentTypeMismatchException: Failed to convert value of type 'java.lang.String' to required type 'java.lang.Integer'; nested exception is java.lang.NumberFormatException: For input string: "my-post.html"]
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:53],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:53],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:53],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:53],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:55],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:55],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:55],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.findAllDiscussPost].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:55],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:55],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:55],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:55],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:55],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:55],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:55],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:55],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:55],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:55],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:55],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:55],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:55],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:55],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:55],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:55],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:55],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:55],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:55],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:55],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:55],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:55],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:55],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:55],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:55],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:55],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:55],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:55],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:55],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:55],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:55],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:55],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:55],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:55],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:55],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:55],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:55],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:55],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:55],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:55],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:55],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:55],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:55],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:55],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:55],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:55],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:55],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:57],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:57],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:57],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:57],访问了[com.bilibili.service.impl.LickServiceImpl.userLikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:57],访问了[com.bilibili.service.impl.FollowServiceImpl.FolloweeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:57],访问了[com.bilibili.service.impl.FollowServiceImpl.FollowersCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:57],访问了[com.bilibili.service.impl.FollowServiceImpl.isFollow].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:57],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:12:57],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:13:14],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:13:14],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:13:14],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:13:14],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:13:14],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:13:14],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:19:31],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:19:31],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:19:31],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.findAllDiscussPost].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:19:31],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:19:31],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:19:31],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:19:31],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:19:31],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:19:31],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:19:31],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:19:31],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:19:31],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:19:31],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:19:31],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:19:31],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:19:31],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:19:31],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:19:31],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:19:31],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:19:31],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:19:31],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:19:31],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:19:31],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:19:31],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:19:31],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:19:31],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:19:31],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:19:31],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:19:31],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:19:31],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:19:31],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:19:31],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:19:31],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:19:31],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:19:31],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:19:31],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:19:31],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:19:31],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:19:31],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:19:31],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:19:31],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:19:31],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:19:31],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:19:31],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:19:31],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:19:31],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:19:31],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:19:31],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:19:31],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:19:31],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
Starting CommunityApplication on DESKTOP-QPE2857 with PID 4212 (started by 北极光。 in D:\编程\community)
No active profile set, falling back to default profiles: default
Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
Multiple Spring Data modules found, entering strict repository configuration mode!
Bootstrapping Spring Data repositories in DEFAULT mode.
Finished Spring Data repository scanning in 55ms. Found 1 repository interfaces.
Multiple Spring Data modules found, entering strict repository configuration mode!
Bootstrapping Spring Data repositories in DEFAULT mode.
Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.bilibili.mapper.ElasticsearchMapper.
Finished Spring Data repository scanning in 8ms. Found 0 repository interfaces.
Bean 'org.springframework.kafka.annotation.KafkaBootstrapConfiguration' of type [org.springframework.kafka.annotation.KafkaBootstrapConfiguration$$EnhancerBySpringCGLIB$$d04761c7] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$fc955044] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Tomcat initialized with port(s): 8989 (http)
Initializing ProtocolHandler ["http-nio-8989"]
Starting service [Tomcat]
Starting Servlet engine: [Apache Tomcat/9.0.19]
Loaded APR based Apache Tomcat Native library [1.2.23] using APR version [1.7.0].
APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].
APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
OpenSSL successfully initialized [OpenSSL 1.1.1c  28 May 2019]
Initializing Spring embedded WebApplicationContext
Root WebApplicationContext: initialization completed in 1671 ms
no modules loaded
loaded plugin [org.elasticsearch.index.reindex.ReindexPlugin]
loaded plugin [org.elasticsearch.join.ParentJoinPlugin]
loaded plugin [org.elasticsearch.percolator.PercolatorPlugin]
loaded plugin [org.elasticsearch.script.mustache.MustachePlugin]
loaded plugin [org.elasticsearch.transport.Netty4Plugin]
Adding transport node : 127.0.0.1:9300
LiveReload server is running on port 35729
Initializing ExecutorService 'applicationTaskExecutor'
Adding welcome page template: index


Using generated security password: 5cec9f0a-551d-48a2-8014-cc8c4f942dad

Creating filter chain: Ant [pattern='/resources/**'], []
Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@b770946, org.springframework.security.web.context.SecurityContextPersistenceFilter@428256e9, org.springframework.security.web.header.HeaderWriterFilter@2b6cd7f2, org.springframework.security.web.authentication.logout.LogoutFilter@25cc5ea6, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@33b6c8c7, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@43c09b30, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@3bc72cd6, org.springframework.security.web.session.SessionManagementFilter@43b1d06e, org.springframework.security.web.access.ExceptionTranslationFilter@7fd39282, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@7d3002b0]
ConsumerConfig values: 
	auto.commit.interval.ms = 3000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.id = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = true
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = community-consumer-group
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	session.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

Kafka version : 2.0.1
Kafka commitId : fa14705e51bd2ce5
Cluster ID: PlpdobZhSsWqjkg6yvKfBA
ConsumerConfig values: 
	auto.commit.interval.ms = 3000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.id = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = true
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = community-consumer-group
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	session.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

Kafka version : 2.0.1
Kafka commitId : fa14705e51bd2ce5
Initializing ExecutorService
ConsumerConfig values: 
	auto.commit.interval.ms = 3000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.id = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = true
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = community-consumer-group
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	session.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

Kafka version : 2.0.1
Kafka commitId : fa14705e51bd2ce5
Cluster ID: PlpdobZhSsWqjkg6yvKfBA
[Consumer clientId=consumer-2, groupId=community-consumer-group] Discovered group coordinator DESKTOP-QPE2857:9092 (id: 2147483647 rack: null)
Cluster ID: PlpdobZhSsWqjkg6yvKfBA
[Consumer clientId=consumer-2, groupId=community-consumer-group] Revoking previously assigned partitions []
partitions revoked: []
[Consumer clientId=consumer-2, groupId=community-consumer-group] (Re-)joining group
ConsumerConfig values: 
	auto.commit.interval.ms = 3000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.id = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = true
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = community-consumer-group
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	session.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

Kafka version : 2.0.1
Kafka commitId : fa14705e51bd2ce5
Initializing ExecutorService
ConsumerConfig values: 
	auto.commit.interval.ms = 3000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.id = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = true
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = community-consumer-group
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	session.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

[Consumer clientId=consumer-2, groupId=community-consumer-group] Successfully joined group with generation 98
[Consumer clientId=consumer-2, groupId=community-consumer-group] Setting newly assigned partitions [delete-0]
Cluster ID: PlpdobZhSsWqjkg6yvKfBA
Kafka version : 2.0.1
[Consumer clientId=consumer-4, groupId=community-consumer-group] Discovered group coordinator DESKTOP-QPE2857:9092 (id: 2147483647 rack: null)
Kafka commitId : fa14705e51bd2ce5
[Consumer clientId=consumer-4, groupId=community-consumer-group] Revoking previously assigned partitions []
partitions revoked: []
[Consumer clientId=consumer-4, groupId=community-consumer-group] (Re-)joining group
partitions assigned: [delete-0]
Cluster ID: PlpdobZhSsWqjkg6yvKfBA
ConsumerConfig values: 
	auto.commit.interval.ms = 3000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.id = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = true
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = community-consumer-group
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	session.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

Kafka version : 2.0.1
Kafka commitId : fa14705e51bd2ce5
Initializing ExecutorService
Cluster ID: PlpdobZhSsWqjkg6yvKfBA
[Consumer clientId=consumer-6, groupId=community-consumer-group] Discovered group coordinator DESKTOP-QPE2857:9092 (id: 2147483647 rack: null)
[Consumer clientId=consumer-6, groupId=community-consumer-group] Revoking previously assigned partitions []
partitions revoked: []
[Consumer clientId=consumer-6, groupId=community-consumer-group] (Re-)joining group
Starting ProtocolHandler ["http-nio-8989"]
Tomcat started on port(s): 8989 (http) with context path '/community'
Started CommunityApplication in 6.073 seconds (JVM running for 7.047)
[Consumer clientId=consumer-2, groupId=community-consumer-group] Attempt to heartbeat failed since group is rebalancing
[Consumer clientId=consumer-2, groupId=community-consumer-group] Revoking previously assigned partitions [delete-0]
partitions revoked: [delete-0]
[Consumer clientId=consumer-2, groupId=community-consumer-group] (Re-)joining group
[Consumer clientId=consumer-6, groupId=community-consumer-group] Successfully joined group with generation 99
[Consumer clientId=consumer-2, groupId=community-consumer-group] Successfully joined group with generation 99
[Consumer clientId=consumer-4, groupId=community-consumer-group] Successfully joined group with generation 99
[Consumer clientId=consumer-6, groupId=community-consumer-group] Setting newly assigned partitions [publish-0]
[Consumer clientId=consumer-2, groupId=community-consumer-group] Setting newly assigned partitions [delete-0]
[Consumer clientId=consumer-4, groupId=community-consumer-group] Setting newly assigned partitions [comment-0, like-0, follow-0]
partitions assigned: [delete-0]
partitions assigned: [publish-0]
partitions assigned: [comment-0, like-0, follow-0]
Initializing Spring DispatcherServlet 'dispatcherServlet'
Initializing Servlet 'dispatcherServlet'
Completed initialization in 7 ms
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:50],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
Starting without optional epoll library
Starting without optional kqueue library
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:51],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:51],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:51],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.findAllDiscussPost].
{dataSource-1} inited
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:51],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:51],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:51],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:51],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:51],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:51],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:51],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:51],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:51],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:51],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:51],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:51],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:51],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:51],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:51],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:51],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:51],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:51],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:51],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:51],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:51],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:51],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:51],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:51],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:51],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:51],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:51],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:51],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:51],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:51],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:51],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:51],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:51],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:51],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:51],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:51],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:51],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:51],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:51],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:51],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:51],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:51],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:51],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:51],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:51],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:51],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:51],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:54],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:54],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:54],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:54],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.findAllDiscussPost].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:54],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:54],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:54],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:54],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:54],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:54],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:54],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:54],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:54],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:54],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:54],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:54],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:54],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:54],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:54],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:54],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:54],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:54],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:54],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:54],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:54],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:54],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:54],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:54],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:54],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:54],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:54],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:54],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:54],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:54],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:54],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:54],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:54],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:54],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:54],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:54],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:54],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:54],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:54],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:54],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:54],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:54],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:54],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:54],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:54],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:54],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:29:54],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:13],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:13],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:13],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:13],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllConversations].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:13],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:13],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:13],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:13],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:15],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:15],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:15],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:15],访问了[com.bilibili.service.impl.MessageServiceImpl.getLastNotice].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:15],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:15],访问了[com.bilibili.service.impl.MessageServiceImpl.getNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:15],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:15],访问了[com.bilibili.service.impl.MessageServiceImpl.getLastNotice].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:15],访问了[com.bilibili.service.impl.MessageServiceImpl.getLastNotice].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:15],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:15],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:15],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:15],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:17],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:17],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:17],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:17],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllNotice].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:17],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:17],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:17],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:17],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:17],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:17],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:17],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:17],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:17],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:17],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:17],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:17],访问了[com.bilibili.service.impl.MessageServiceImpl.updateMessageStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:17],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:17],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:20],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:20],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:20],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:20],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.getDiscussPostById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:20],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:20],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:20],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:20],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:20],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:20],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:20],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:20],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:20],访问了[com.bilibili.service.impl.CommentServiceImpl.CommentCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:20],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:20],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:20],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:20],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:20],访问了[com.bilibili.service.impl.CommentServiceImpl.CommentCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:20],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:20],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:20],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:20],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:20],访问了[com.bilibili.service.impl.CommentServiceImpl.CommentCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:20],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:20],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:20],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:20],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:20],访问了[com.bilibili.service.impl.CommentServiceImpl.CommentCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:20],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:20],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:20],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:20],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:20],访问了[com.bilibili.service.impl.CommentServiceImpl.CommentCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:20],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:20],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:23],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:23],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:23],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:23],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllConversations].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:23],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:23],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:23],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:23],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:24],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:24],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:24],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:24],访问了[com.bilibili.service.impl.MessageServiceImpl.getLastNotice].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:24],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:24],访问了[com.bilibili.service.impl.MessageServiceImpl.getNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:24],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:24],访问了[com.bilibili.service.impl.MessageServiceImpl.getLastNotice].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:24],访问了[com.bilibili.service.impl.MessageServiceImpl.getLastNotice].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:24],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:24],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:24],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:24],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:25],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:25],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:25],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:25],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllNotice].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:25],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:25],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:25],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:25],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:25],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:25],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:25],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:25],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:25],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:25],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:25],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:25],访问了[com.bilibili.service.impl.MessageServiceImpl.updateMessageStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:25],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:25],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:28],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:28],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:28],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:28],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.getDiscussPostById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:28],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:28],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:28],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:28],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:28],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:28],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:28],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:28],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:28],访问了[com.bilibili.service.impl.CommentServiceImpl.CommentCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:28],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:28],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:28],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:28],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:28],访问了[com.bilibili.service.impl.CommentServiceImpl.CommentCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:28],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:28],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:28],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:28],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:28],访问了[com.bilibili.service.impl.CommentServiceImpl.CommentCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:28],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:28],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:28],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:28],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:28],访问了[com.bilibili.service.impl.CommentServiceImpl.CommentCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:28],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:28],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:28],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:28],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:28],访问了[com.bilibili.service.impl.CommentServiceImpl.CommentCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:28],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:28],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:29],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:29],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:29],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:29],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllConversations].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:29],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:29],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:29],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:29],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:31],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:31],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:31],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:31],访问了[com.bilibili.service.impl.MessageServiceImpl.getLastNotice].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:31],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:31],访问了[com.bilibili.service.impl.MessageServiceImpl.getNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:31],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:31],访问了[com.bilibili.service.impl.MessageServiceImpl.getLastNotice].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:31],访问了[com.bilibili.service.impl.MessageServiceImpl.getLastNotice].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:31],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:31],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:31],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:31],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:32],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:32],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:32],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:32],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllNotice].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:32],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:32],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:32],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:32],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:32],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:32],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:32],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:33],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:33],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:33],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:33],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:33],访问了[com.bilibili.service.impl.MessageServiceImpl.updateMessageStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:33],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:33],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:34],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:34],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:34],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:34],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllNotice].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:34],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:34],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:34],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:34],访问了[com.bilibili.service.impl.MessageServiceImpl.updateMessageStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:34],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:34],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:36],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:36],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:36],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:36],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.getDiscussPostById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:36],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:36],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:36],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:36],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:36],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:36],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:36],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:36],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:36],访问了[com.bilibili.service.impl.CommentServiceImpl.CommentCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:36],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:36],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:36],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:36],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:36],访问了[com.bilibili.service.impl.CommentServiceImpl.CommentCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:36],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:36],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:36],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:36],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:36],访问了[com.bilibili.service.impl.CommentServiceImpl.CommentCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:36],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:36],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:36],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:36],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:36],访问了[com.bilibili.service.impl.CommentServiceImpl.CommentCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:36],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:36],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:36],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:36],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:36],访问了[com.bilibili.service.impl.CommentServiceImpl.CommentCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:36],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:36],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:38],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:38],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:38],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:38],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllConversations].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:38],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:38],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:38],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:38],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:39],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:39],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:39],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:39],访问了[com.bilibili.service.impl.MessageServiceImpl.getLastNotice].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:39],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:39],访问了[com.bilibili.service.impl.MessageServiceImpl.getNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:39],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:39],访问了[com.bilibili.service.impl.MessageServiceImpl.getLastNotice].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:39],访问了[com.bilibili.service.impl.MessageServiceImpl.getLastNotice].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:39],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:39],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:39],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:39],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:40],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:40],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:40],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:40],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllConversations].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:40],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:40],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:40],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:40],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:41],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:41],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:41],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:41],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.findAllDiscussPost].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:41],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:41],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:41],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:41],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:41],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:41],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:41],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:41],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:41],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:41],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:41],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:41],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:41],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:41],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:41],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:41],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:41],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:41],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:41],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:41],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:41],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:41],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:41],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:41],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:41],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:41],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:41],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:41],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:41],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:41],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:41],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:41],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:41],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:41],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:41],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:41],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:41],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:41],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:41],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:41],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:41],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:41],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:41],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:41],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:41],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:41],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:41],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:43],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:43],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:43],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:43],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.getDiscussPostById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:43],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:43],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:43],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:43],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:43],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:43],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:47],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:47],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:47],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:47],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.updateType].
ProducerConfig values: 
	acks = 1
	batch.size = 16384
	bootstrap.servers = [localhost:9092]
	buffer.memory = 33554432
	client.id = 
	compression.type = none
	connections.max.idle.ms = 540000
	enable.idempotence = false
	interceptor.classes = []
	key.serializer = class org.apache.kafka.common.serialization.StringSerializer
	linger.ms = 0
	max.block.ms = 60000
	max.in.flight.requests.per.connection = 5
	max.request.size = 1048576
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partitioner.class = class org.apache.kafka.clients.producer.internals.DefaultPartitioner
	receive.buffer.bytes = 32768
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 0
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	transaction.timeout.ms = 60000
	transactional.id = null
	value.serializer = class org.apache.kafka.common.serialization.StringSerializer

Kafka version : 2.0.1
Kafka commitId : fa14705e51bd2ce5
Cluster ID: PlpdobZhSsWqjkg6yvKfBA
普通service方法
普通service方法
Error while processing: ConsumerRecord(topic = publish, partition = 0, offset = 1, CreateTime = 1605270647992, serialized key size = -1, serialized value size = 56, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = {"data":{},"entityType":1,"topic":"publish","userId":11})
org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.bilibili.event.EventConsumer.handlePublishMessage(org.apache.kafka.clients.consumer.ConsumerRecord)' threw exception; nested exception is java.lang.IllegalArgumentException: Cannot save 'null' entity.; nested exception is java.lang.IllegalArgumentException: Cannot save 'null' entity.
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:1311)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:1300)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:1227)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:1198)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:1118)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:933)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:749)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:698)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.IllegalArgumentException: Cannot save 'null' entity.
	at org.springframework.util.Assert.notNull(Assert.java:198)
	at org.springframework.data.elasticsearch.repository.support.AbstractElasticsearchRepository.save(AbstractElasticsearchRepository.java:155)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:359)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:200)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:644)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:608)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.lambda$invoke$3(RepositoryFactorySupport.java:595)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:595)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:59)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.repository.core.support.SurroundingTransactionDetectorMethodInterceptor.invoke(SurroundingTransactionDetectorMethodInterceptor.java:61)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy117.save(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:343)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy117.save(Unknown Source)
	at com.bilibili.service.impl.ElasticsearchServiceImpl.saveDiscussPost(ElasticsearchServiceImpl.java:39)
	at com.bilibili.service.impl.ElasticsearchServiceImpl$$FastClassBySpringCGLIB$$999858d4.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bilibili.service.impl.ElasticsearchServiceImpl$$EnhancerBySpringCGLIB$$614ab397.saveDiscussPost(<generated>)
	at com.bilibili.event.EventConsumer.handlePublishMessage(EventConsumer.java:75)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:171)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:120)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:48)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:283)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:79)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:50)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:1263)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:1256)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:1217)
	... 8 common frames omitted
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:50],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:50],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:50],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:50],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.updateStatus].
普通service方法
普通service方法
Error while processing: ConsumerRecord(topic = publish, partition = 0, offset = 2, CreateTime = 1605270650358, serialized key size = -1, serialized value size = 56, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = {"data":{},"entityType":1,"topic":"publish","userId":11})
org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.bilibili.event.EventConsumer.handlePublishMessage(org.apache.kafka.clients.consumer.ConsumerRecord)' threw exception; nested exception is java.lang.IllegalArgumentException: Cannot save 'null' entity.; nested exception is java.lang.IllegalArgumentException: Cannot save 'null' entity.
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:1311)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:1300)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:1227)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:1198)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:1118)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:933)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:749)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:698)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.IllegalArgumentException: Cannot save 'null' entity.
	at org.springframework.util.Assert.notNull(Assert.java:198)
	at org.springframework.data.elasticsearch.repository.support.AbstractElasticsearchRepository.save(AbstractElasticsearchRepository.java:155)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:359)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:200)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:644)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:608)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.lambda$invoke$3(RepositoryFactorySupport.java:595)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:595)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:59)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.repository.core.support.SurroundingTransactionDetectorMethodInterceptor.invoke(SurroundingTransactionDetectorMethodInterceptor.java:61)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy117.save(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:343)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy117.save(Unknown Source)
	at com.bilibili.service.impl.ElasticsearchServiceImpl.saveDiscussPost(ElasticsearchServiceImpl.java:39)
	at com.bilibili.service.impl.ElasticsearchServiceImpl$$FastClassBySpringCGLIB$$999858d4.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bilibili.service.impl.ElasticsearchServiceImpl$$EnhancerBySpringCGLIB$$614ab397.saveDiscussPost(<generated>)
	at com.bilibili.event.EventConsumer.handlePublishMessage(EventConsumer.java:75)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:171)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:120)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:48)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:283)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:79)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:50)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:1263)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:1256)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:1217)
	... 8 common frames omitted
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:51],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:51],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:51],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:51],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.findAllDiscussPost].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:51],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:51],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:51],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:51],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:51],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:51],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:51],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:51],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:51],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:51],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:51],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:51],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:51],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:51],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:51],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:51],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:51],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:51],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:51],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:51],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:51],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:51],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:51],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:51],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:51],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:51],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:51],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:51],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:51],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:51],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:51],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:51],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:51],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:51],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:51],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:51],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:51],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:51],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:51],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:51],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:51],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:51],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:51],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:51],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:51],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:51],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:51],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:54],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:54],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:54],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:54],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.findAllDiscussPost].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:54],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:54],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:54],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:54],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:54],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:54],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:54],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:54],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:54],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:54],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:54],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:54],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:54],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:54],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:54],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:54],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:54],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:54],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:54],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:54],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:54],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:54],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:54],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:54],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:54],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:54],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:54],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:54],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:54],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:54],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:54],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:54],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:54],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:54],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:54],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:54],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:54],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:54],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:54],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:54],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:54],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:54],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:54],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:54],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:54],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:54],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:54],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:56],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:56],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:56],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:56],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.getDiscussPostById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:56],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:56],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:56],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:56],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:56],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:30:56],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:04],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:04],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:04],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:04],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.updateType].
普通service方法
普通service方法
Error while processing: ConsumerRecord(topic = publish, partition = 0, offset = 3, CreateTime = 1605270664594, serialized key size = -1, serialized value size = 56, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = {"data":{},"entityType":1,"topic":"publish","userId":11})
org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.bilibili.event.EventConsumer.handlePublishMessage(org.apache.kafka.clients.consumer.ConsumerRecord)' threw exception; nested exception is java.lang.IllegalArgumentException: Cannot save 'null' entity.; nested exception is java.lang.IllegalArgumentException: Cannot save 'null' entity.
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:1311)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:1300)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:1227)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:1198)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:1118)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:933)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:749)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:698)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.IllegalArgumentException: Cannot save 'null' entity.
	at org.springframework.util.Assert.notNull(Assert.java:198)
	at org.springframework.data.elasticsearch.repository.support.AbstractElasticsearchRepository.save(AbstractElasticsearchRepository.java:155)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:359)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:200)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:644)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:608)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.lambda$invoke$3(RepositoryFactorySupport.java:595)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:595)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:59)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.repository.core.support.SurroundingTransactionDetectorMethodInterceptor.invoke(SurroundingTransactionDetectorMethodInterceptor.java:61)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy117.save(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:343)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy117.save(Unknown Source)
	at com.bilibili.service.impl.ElasticsearchServiceImpl.saveDiscussPost(ElasticsearchServiceImpl.java:39)
	at com.bilibili.service.impl.ElasticsearchServiceImpl$$FastClassBySpringCGLIB$$999858d4.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bilibili.service.impl.ElasticsearchServiceImpl$$EnhancerBySpringCGLIB$$614ab397.saveDiscussPost(<generated>)
	at com.bilibili.event.EventConsumer.handlePublishMessage(EventConsumer.java:75)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:171)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:120)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:48)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:283)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:79)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:50)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:1263)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:1256)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:1217)
	... 8 common frames omitted
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:08],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:08],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:08],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:08],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.updateStatus].
普通service方法
普通service方法
Error while processing: ConsumerRecord(topic = publish, partition = 0, offset = 4, CreateTime = 1605270668160, serialized key size = -1, serialized value size = 56, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = {"data":{},"entityType":1,"topic":"publish","userId":11})
org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.bilibili.event.EventConsumer.handlePublishMessage(org.apache.kafka.clients.consumer.ConsumerRecord)' threw exception; nested exception is java.lang.IllegalArgumentException: Cannot save 'null' entity.; nested exception is java.lang.IllegalArgumentException: Cannot save 'null' entity.
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:1311)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:1300)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:1227)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:1198)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:1118)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:933)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:749)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:698)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.IllegalArgumentException: Cannot save 'null' entity.
	at org.springframework.util.Assert.notNull(Assert.java:198)
	at org.springframework.data.elasticsearch.repository.support.AbstractElasticsearchRepository.save(AbstractElasticsearchRepository.java:155)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:359)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:200)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:644)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:608)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.lambda$invoke$3(RepositoryFactorySupport.java:595)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:595)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:59)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.repository.core.support.SurroundingTransactionDetectorMethodInterceptor.invoke(SurroundingTransactionDetectorMethodInterceptor.java:61)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy117.save(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:343)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy117.save(Unknown Source)
	at com.bilibili.service.impl.ElasticsearchServiceImpl.saveDiscussPost(ElasticsearchServiceImpl.java:39)
	at com.bilibili.service.impl.ElasticsearchServiceImpl$$FastClassBySpringCGLIB$$999858d4.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bilibili.service.impl.ElasticsearchServiceImpl$$EnhancerBySpringCGLIB$$614ab397.saveDiscussPost(<generated>)
	at com.bilibili.event.EventConsumer.handlePublishMessage(EventConsumer.java:75)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:171)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:120)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:48)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:283)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:79)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:50)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:1263)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:1256)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:1217)
	... 8 common frames omitted
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:29],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:29],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:29],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:29],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.findAllDiscussPost].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:29],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:29],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:29],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:29],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:29],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:29],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:29],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:29],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:29],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:29],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:29],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:29],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:29],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:29],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:29],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:29],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:29],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:29],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:29],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:29],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:29],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:29],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:29],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:29],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:29],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:29],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:29],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:29],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:29],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:29],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:29],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:29],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:29],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:29],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:29],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:29],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:29],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:29],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:29],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:29],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:29],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:29],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:29],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:29],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:29],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:29],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:29],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:31],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:31],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:31],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:31],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.findAllDiscussPost].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:31],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:31],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:31],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:31],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:31],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:31],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:31],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:31],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:31],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:31],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:31],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:31],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:31],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:31],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:31],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:31],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:31],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:31],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:31],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:31],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:31],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:31],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:31],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:31],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:31],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:31],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:31],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:31],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:31],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:31],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:31],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:31],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:31],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:31],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:31],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:31],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:31],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:31],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:31],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:31],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:31],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:31],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:31],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:31],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:31],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:31],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:31:31],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:34:20],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:34:20],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:34:20],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:34:20],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.getDiscussPostById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:34:20],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:34:20],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:34:20],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:34:20],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:34:20],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:34:20],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:34:25],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:34:25],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:34:25],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:34:25],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.updateType].
普通service方法
普通service方法
Error while processing: ConsumerRecord(topic = publish, partition = 0, offset = 5, CreateTime = 1605270865157, serialized key size = -1, serialized value size = 56, headers = RecordHeaders(headers = [], isReadOnly = false), key = null, value = {"data":{},"entityType":1,"topic":"publish","userId":11})
org.springframework.kafka.listener.ListenerExecutionFailedException: Listener method 'public void com.bilibili.event.EventConsumer.handlePublishMessage(org.apache.kafka.clients.consumer.ConsumerRecord)' threw exception; nested exception is java.lang.IllegalArgumentException: Cannot save 'null' entity.; nested exception is java.lang.IllegalArgumentException: Cannot save 'null' entity.
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.decorateException(KafkaMessageListenerContainer.java:1311)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeErrorHandler(KafkaMessageListenerContainer.java:1300)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:1227)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeWithRecords(KafkaMessageListenerContainer.java:1198)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeRecordListener(KafkaMessageListenerContainer.java:1118)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeListener(KafkaMessageListenerContainer.java:933)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.pollAndInvoke(KafkaMessageListenerContainer.java:749)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.run(KafkaMessageListenerContainer.java:698)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.lang.IllegalArgumentException: Cannot save 'null' entity.
	at org.springframework.util.Assert.notNull(Assert.java:198)
	at org.springframework.data.elasticsearch.repository.support.AbstractElasticsearchRepository.save(AbstractElasticsearchRepository.java:155)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.data.repository.core.support.RepositoryComposition$RepositoryFragments.invoke(RepositoryComposition.java:359)
	at org.springframework.data.repository.core.support.RepositoryComposition.invoke(RepositoryComposition.java:200)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$ImplementationMethodExecutionInterceptor.invoke(RepositoryFactorySupport.java:644)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:608)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.lambda$invoke$3(RepositoryFactorySupport.java:595)
	at org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:595)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:59)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.data.repository.core.support.SurroundingTransactionDetectorMethodInterceptor.invoke(SurroundingTransactionDetectorMethodInterceptor.java:61)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy117.save(Unknown Source)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.aop.support.AopUtils.invokeJoinpointUsingReflection(AopUtils.java:343)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.invokeJoinpoint(ReflectiveMethodInvocation.java:198)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:139)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:212)
	at com.sun.proxy.$Proxy117.save(Unknown Source)
	at com.bilibili.service.impl.ElasticsearchServiceImpl.saveDiscussPost(ElasticsearchServiceImpl.java:39)
	at com.bilibili.service.impl.ElasticsearchServiceImpl$$FastClassBySpringCGLIB$$999858d4.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
	at org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
	at com.bilibili.service.impl.ElasticsearchServiceImpl$$EnhancerBySpringCGLIB$$614ab397.saveDiscussPost(<generated>)
	at com.bilibili.event.EventConsumer.handlePublishMessage(EventConsumer.java:75)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:171)
	at org.springframework.messaging.handler.invocation.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:120)
	at org.springframework.kafka.listener.adapter.HandlerAdapter.invoke(HandlerAdapter.java:48)
	at org.springframework.kafka.listener.adapter.MessagingMessageListenerAdapter.invokeHandler(MessagingMessageListenerAdapter.java:283)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:79)
	at org.springframework.kafka.listener.adapter.RecordMessagingMessageListenerAdapter.onMessage(RecordMessagingMessageListenerAdapter.java:50)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeOnMessage(KafkaMessageListenerContainer.java:1263)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.invokeOnMessage(KafkaMessageListenerContainer.java:1256)
	at org.springframework.kafka.listener.KafkaMessageListenerContainer$ListenerConsumer.doInvokeRecordListener(KafkaMessageListenerContainer.java:1217)
	... 8 common frames omitted
Starting CommunityApplication on DESKTOP-QPE2857 with PID 4544 (started by 北极光。 in D:\编程\community)
No active profile set, falling back to default profiles: default
Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
Multiple Spring Data modules found, entering strict repository configuration mode!
Bootstrapping Spring Data repositories in DEFAULT mode.
Finished Spring Data repository scanning in 56ms. Found 1 repository interfaces.
Multiple Spring Data modules found, entering strict repository configuration mode!
Bootstrapping Spring Data repositories in DEFAULT mode.
Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.bilibili.mapper.ElasticsearchMapper.
Finished Spring Data repository scanning in 6ms. Found 0 repository interfaces.
Bean 'org.springframework.kafka.annotation.KafkaBootstrapConfiguration' of type [org.springframework.kafka.annotation.KafkaBootstrapConfiguration$$EnhancerBySpringCGLIB$$7fb1980c] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$abff8689] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Tomcat initialized with port(s): 8989 (http)
Initializing ProtocolHandler ["http-nio-8989"]
Starting service [Tomcat]
Starting Servlet engine: [Apache Tomcat/9.0.19]
Loaded APR based Apache Tomcat Native library [1.2.23] using APR version [1.7.0].
APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].
APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
OpenSSL successfully initialized [OpenSSL 1.1.1c  28 May 2019]
Initializing Spring embedded WebApplicationContext
Root WebApplicationContext: initialization completed in 1541 ms
no modules loaded
loaded plugin [org.elasticsearch.index.reindex.ReindexPlugin]
loaded plugin [org.elasticsearch.join.ParentJoinPlugin]
loaded plugin [org.elasticsearch.percolator.PercolatorPlugin]
loaded plugin [org.elasticsearch.script.mustache.MustachePlugin]
loaded plugin [org.elasticsearch.transport.Netty4Plugin]
Adding transport node : 127.0.0.1:9300
LiveReload server is running on port 35729
Initializing ExecutorService 'applicationTaskExecutor'
Adding welcome page template: index


Using generated security password: 8dd35191-05a5-4618-a45b-521e4f1227c1

Creating filter chain: Ant [pattern='/resources/**'], []
Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@77e93028, org.springframework.security.web.context.SecurityContextPersistenceFilter@3f9562b2, org.springframework.security.web.header.HeaderWriterFilter@431f5ff1, org.springframework.security.web.authentication.logout.LogoutFilter@6b2b263e, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@3bc0f687, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@4afefeda, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@10fbc1c2, org.springframework.security.web.session.SessionManagementFilter@ccdb426, org.springframework.security.web.access.ExceptionTranslationFilter@6d4f2342, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@1eb2f5be]
ConsumerConfig values: 
	auto.commit.interval.ms = 3000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.id = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = true
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = community-consumer-group
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	session.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

Kafka version : 2.0.1
Kafka commitId : fa14705e51bd2ce5
Cluster ID: PlpdobZhSsWqjkg6yvKfBA
ConsumerConfig values: 
	auto.commit.interval.ms = 3000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.id = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = true
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = community-consumer-group
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	session.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

Kafka version : 2.0.1
Kafka commitId : fa14705e51bd2ce5
Initializing ExecutorService
ConsumerConfig values: 
	auto.commit.interval.ms = 3000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.id = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = true
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = community-consumer-group
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	session.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

Kafka version : 2.0.1
Kafka commitId : fa14705e51bd2ce5
Cluster ID: PlpdobZhSsWqjkg6yvKfBA
[Consumer clientId=consumer-2, groupId=community-consumer-group] Discovered group coordinator DESKTOP-QPE2857:9092 (id: 2147483647 rack: null)
Cluster ID: PlpdobZhSsWqjkg6yvKfBA
[Consumer clientId=consumer-2, groupId=community-consumer-group] Revoking previously assigned partitions []
partitions revoked: []
[Consumer clientId=consumer-2, groupId=community-consumer-group] (Re-)joining group
ConsumerConfig values: 
	auto.commit.interval.ms = 3000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.id = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = true
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = community-consumer-group
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	session.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

Kafka version : 2.0.1
Kafka commitId : fa14705e51bd2ce5
Initializing ExecutorService
ConsumerConfig values: 
	auto.commit.interval.ms = 3000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.id = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = true
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = community-consumer-group
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	session.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

Cluster ID: PlpdobZhSsWqjkg6yvKfBA
Kafka version : 2.0.1
Kafka commitId : fa14705e51bd2ce5
[Consumer clientId=consumer-4, groupId=community-consumer-group] Discovered group coordinator DESKTOP-QPE2857:9092 (id: 2147483647 rack: null)
[Consumer clientId=consumer-4, groupId=community-consumer-group] Revoking previously assigned partitions []
partitions revoked: []
[Consumer clientId=consumer-4, groupId=community-consumer-group] (Re-)joining group
[Consumer clientId=consumer-2, groupId=community-consumer-group] Successfully joined group with generation 101
[Consumer clientId=consumer-2, groupId=community-consumer-group] Setting newly assigned partitions [comment-0, like-0, follow-0]
Cluster ID: PlpdobZhSsWqjkg6yvKfBA
ConsumerConfig values: 
	auto.commit.interval.ms = 3000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.id = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = true
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = community-consumer-group
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	session.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

partitions assigned: [comment-0, like-0, follow-0]
Kafka version : 2.0.1
Kafka commitId : fa14705e51bd2ce5
Initializing ExecutorService
Cluster ID: PlpdobZhSsWqjkg6yvKfBA
[Consumer clientId=consumer-6, groupId=community-consumer-group] Discovered group coordinator DESKTOP-QPE2857:9092 (id: 2147483647 rack: null)
[Consumer clientId=consumer-6, groupId=community-consumer-group] Revoking previously assigned partitions []
partitions revoked: []
[Consumer clientId=consumer-6, groupId=community-consumer-group] (Re-)joining group
Starting ProtocolHandler ["http-nio-8989"]
Tomcat started on port(s): 8989 (http) with context path '/community'
Started CommunityApplication in 5.992 seconds (JVM running for 7.076)
[Consumer clientId=consumer-2, groupId=community-consumer-group] Attempt to heartbeat failed since group is rebalancing
[Consumer clientId=consumer-2, groupId=community-consumer-group] Revoking previously assigned partitions [comment-0, like-0, follow-0]
partitions revoked: [comment-0, like-0, follow-0]
[Consumer clientId=consumer-2, groupId=community-consumer-group] (Re-)joining group
[Consumer clientId=consumer-6, groupId=community-consumer-group] Successfully joined group with generation 102
[Consumer clientId=consumer-4, groupId=community-consumer-group] Successfully joined group with generation 102
[Consumer clientId=consumer-2, groupId=community-consumer-group] Successfully joined group with generation 102
[Consumer clientId=consumer-4, groupId=community-consumer-group] Setting newly assigned partitions [publish-0]
[Consumer clientId=consumer-6, groupId=community-consumer-group] Setting newly assigned partitions [delete-0]
[Consumer clientId=consumer-2, groupId=community-consumer-group] Setting newly assigned partitions [comment-0, like-0, follow-0]
partitions assigned: [publish-0]
partitions assigned: [comment-0, like-0, follow-0]
partitions assigned: [delete-0]
Initializing Spring DispatcherServlet 'dispatcherServlet'
Initializing Servlet 'dispatcherServlet'
Completed initialization in 7 ms
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:15],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
Starting without optional epoll library
Starting without optional kqueue library
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:15],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:15],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:15],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.findAllDiscussPost].
{dataSource-1} inited
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:16],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:16],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:16],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:16],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:16],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:16],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:16],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:16],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:16],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:16],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:16],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:16],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:16],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:16],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:16],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:16],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:16],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:16],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:16],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:16],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:16],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:16],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:16],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:16],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:16],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:16],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:16],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:16],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:16],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:16],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:16],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:16],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:16],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:16],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:16],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:16],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:16],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:16],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:16],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:16],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:16],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:16],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:16],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:16],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:16],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:16],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:16],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:19],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:19],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:19],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:19],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.getDiscussPostById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:19],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:19],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:19],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:19],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:19],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:19],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:21],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:21],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:21],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:22],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.updateType].
ProducerConfig values: 
	acks = 1
	batch.size = 16384
	bootstrap.servers = [localhost:9092]
	buffer.memory = 33554432
	client.id = 
	compression.type = none
	connections.max.idle.ms = 540000
	enable.idempotence = false
	interceptor.classes = []
	key.serializer = class org.apache.kafka.common.serialization.StringSerializer
	linger.ms = 0
	max.block.ms = 60000
	max.in.flight.requests.per.connection = 5
	max.request.size = 1048576
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partitioner.class = class org.apache.kafka.clients.producer.internals.DefaultPartitioner
	receive.buffer.bytes = 32768
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 0
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	transaction.timeout.ms = 60000
	transactional.id = null
	value.serializer = class org.apache.kafka.common.serialization.StringSerializer

Kafka version : 2.0.1
Kafka commitId : fa14705e51bd2ce5
Cluster ID: PlpdobZhSsWqjkg6yvKfBA
普通service方法
普通service方法
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:22],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:22],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:22],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:22],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.updateStatus].
普通service方法
普通service方法
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:25],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:25],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:25],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:25],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.findAllDiscussPost].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:25],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:25],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:25],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:25],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:25],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:25],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:25],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:25],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:25],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:25],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:25],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:25],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:25],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:25],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:25],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:25],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:25],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:25],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:25],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:25],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:25],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:25],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:25],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:25],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:25],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:25],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:25],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:25],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:25],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:25],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:25],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:25],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:25],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:25],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:25],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:25],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:25],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:25],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:25],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:25],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:25],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:25],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:25],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:25],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:25],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:25],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:25],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:32],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:32],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:32],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:32],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.getDiscussPostById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:32],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:32],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:32],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:32],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:32],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:32],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:39],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:39],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:39],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:39],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.findAllDiscussPost].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:39],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:39],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:39],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:39],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:39],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:39],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:39],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:39],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:39],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:39],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:39],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:39],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:39],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:39],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:39],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:39],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:39],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:39],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:39],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:39],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:39],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:39],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:39],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:39],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:39],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:39],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:39],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:39],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:39],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:39],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:39],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:39],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:39],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:39],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:39],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:39],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:39],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:39],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:39],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:39],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:39],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:39],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:39],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:39],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:39],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:39],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:39],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:44],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:44],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:44],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:44],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.getDiscussPostById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:44],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:44],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:44],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:44],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:44],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:44],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:52],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:52],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:52],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:52],访问了[com.bilibili.service.impl.LickServiceImpl.link].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:52],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:52],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
普通service方法
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:57],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:57],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:57],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:57],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.findAllDiscussPost].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:57],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:57],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:57],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:57],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:57],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:57],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:57],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:57],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:57],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:57],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:57],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:57],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:57],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:57],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:57],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:57],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:57],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:57],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:57],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:57],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:57],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:57],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:57],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:57],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:57],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:57],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:57],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:57],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:57],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:57],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:57],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:57],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:57],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:57],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:57],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:57],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:57],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:57],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:57],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:57],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:57],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:57],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:57],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:57],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:57],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:57],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:57],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:58],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:58],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:58],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:58],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.getDiscussPostById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:58],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:58],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:58],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:58],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:58],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:38:58],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:00],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:00],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:00],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:00],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.updateStatus].
普通service方法
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:00],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:00],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:00],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:00],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.findAllDiscussPost].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:00],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:00],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:00],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:00],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:00],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:00],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:00],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:00],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:00],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:00],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:00],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:00],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:00],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:00],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:00],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:00],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:00],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:00],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:00],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:00],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:00],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:00],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:00],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:00],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:00],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:00],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:00],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:00],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:00],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:00],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:00],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:00],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:00],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:00],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:00],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:00],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:00],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:00],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:00],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:00],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:00],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:00],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:00],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:00],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:00],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:00],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:00],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:02],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:02],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:02],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:02],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.findAllDiscussPost].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:02],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:02],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:02],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:02],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:02],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:02],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:02],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:02],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:02],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:02],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:02],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:02],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:02],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:02],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:02],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:02],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:02],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:02],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:02],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:02],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:02],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:02],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:02],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:02],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:02],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:02],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:02],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:02],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:02],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:02],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:02],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:02],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:02],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:02],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:02],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:02],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:02],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:02],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:02],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:02],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:02],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:02],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:02],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:02],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:02],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:02],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:02],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:08],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:08],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:08],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:08],访问了[com.bilibili.service.impl.UserServiceImpl.logout].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:08],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:08],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:08],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:39:08],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:40:55],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
服务器异常：Missing cookie 'owner' for method parameter of type String
org.springframework.web.method.annotation.AbstractCookieValueMethodArgumentResolver.handleMissingValue(AbstractCookieValueMethodArgumentResolver.java:70)
org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.handleMissingValue(AbstractNamedValueMethodArgumentResolver.java:221)
org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:113)
org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:126)
org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:167)
org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:134)
org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:357)
org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:270)
org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:836)
org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1747)
org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
java.lang.Thread.run(Thread.java:748)
Resolved [org.springframework.web.bind.MissingRequestCookieException: Missing cookie 'owner' for method parameter of type String]
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:40:55],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:40:58],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:40:58],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:41:52],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:41:52],访问了[com.bilibili.service.impl.UserServiceImpl.login].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:41:52],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:41:52],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:41:52],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:41:52],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.findAllDiscussPost].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:41:52],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:41:52],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:41:52],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:41:52],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:41:52],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:41:52],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:41:52],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:41:52],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:41:52],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:41:52],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:41:52],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:41:52],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:41:52],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:41:52],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:41:52],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:41:52],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:41:52],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:41:52],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:41:52],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:41:52],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:41:52],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:41:52],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:41:52],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:41:52],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:41:52],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:41:52],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:41:52],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:41:52],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:41:52],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:41:52],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:41:52],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:41:52],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:41:52],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:41:52],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:41:52],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:41:52],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:41:52],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:41:52],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:41:52],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:41:52],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:41:52],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:41:52],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:41:52],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:41:52],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:41:52],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:41:52],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:41:52],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:05],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:05],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:05],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:05],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.getDiscussPostById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:05],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:05],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:05],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:05],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:05],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:05],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:05],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:05],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:05],访问了[com.bilibili.service.impl.CommentServiceImpl.CommentCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:05],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:05],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:10],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:10],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:10],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:10],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.updateType].
普通service方法
普通service方法
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:12],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:12],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:12],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:12],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.findAllDiscussPost].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:12],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:12],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:12],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:12],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:12],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:12],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:12],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:12],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:12],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:12],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:12],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:12],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:12],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:12],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:12],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:12],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:12],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:12],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:12],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:12],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:12],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:12],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:12],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:12],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:12],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:12],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:12],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:12],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:12],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:12],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:12],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:12],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:12],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:12],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:12],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:12],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:12],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:12],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:12],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:12],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:12],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:12],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:12],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:12],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:12],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:12],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:12],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:13],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:13],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:13],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:13],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.getDiscussPostById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:13],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:13],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:13],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:13],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:13],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:13],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:13],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:13],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:13],访问了[com.bilibili.service.impl.CommentServiceImpl.CommentCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:13],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:13],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:37],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:37],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:37],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:37],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.findAllDiscussPost].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:37],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:37],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:37],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:37],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:37],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:37],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:37],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:37],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:37],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:37],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:37],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:37],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:37],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:37],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:37],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:37],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:37],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:37],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:37],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:37],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:37],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:37],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:37],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:37],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:37],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:37],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:37],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:37],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:37],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:37],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:37],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:37],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:37],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:37],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:37],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:37],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:37],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:37],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:37],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:37],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:37],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:37],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:37],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:37],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:37],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:37],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 20:46:37],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
Starting CommunityApplication on DESKTOP-QPE2857 with PID 15440 (started by 北极光。 in D:\编程\community)
No active profile set, falling back to default profiles: default
Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
Multiple Spring Data modules found, entering strict repository configuration mode!
Bootstrapping Spring Data repositories in DEFAULT mode.
Finished Spring Data repository scanning in 82ms. Found 1 repository interfaces.
Multiple Spring Data modules found, entering strict repository configuration mode!
Bootstrapping Spring Data repositories in DEFAULT mode.
Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.bilibili.mapper.ElasticsearchMapper.
Finished Spring Data repository scanning in 10ms. Found 0 repository interfaces.
Bean 'org.springframework.kafka.annotation.KafkaBootstrapConfiguration' of type [org.springframework.kafka.annotation.KafkaBootstrapConfiguration$$EnhancerBySpringCGLIB$$f19c2517] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$1dea1394] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Tomcat initialized with port(s): 8989 (http)
Initializing ProtocolHandler ["http-nio-8989"]
Starting service [Tomcat]
Starting Servlet engine: [Apache Tomcat/9.0.19]
Loaded APR based Apache Tomcat Native library [1.2.23] using APR version [1.7.0].
APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].
APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
OpenSSL successfully initialized [OpenSSL 1.1.1c  28 May 2019]
Initializing Spring embedded WebApplicationContext
Root WebApplicationContext: initialization completed in 2224 ms
no modules loaded
loaded plugin [org.elasticsearch.index.reindex.ReindexPlugin]
loaded plugin [org.elasticsearch.join.ParentJoinPlugin]
loaded plugin [org.elasticsearch.percolator.PercolatorPlugin]
loaded plugin [org.elasticsearch.script.mustache.MustachePlugin]
loaded plugin [org.elasticsearch.transport.Netty4Plugin]
Adding transport node : 127.0.0.1:9300
LiveReload server is running on port 35729
Initializing ExecutorService 'applicationTaskExecutor'
Adding welcome page template: index


Using generated security password: f11e2563-9262-4886-b72d-efd93717f1f0

Creating filter chain: Ant [pattern='/resources/**'], []
Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@760d517c, org.springframework.security.web.context.SecurityContextPersistenceFilter@1f18b970, org.springframework.security.web.header.HeaderWriterFilter@27a06788, org.springframework.security.web.authentication.logout.LogoutFilter@c024012, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@2a2d583f, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@780d35eb, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@1cd14c90, org.springframework.security.web.session.SessionManagementFilter@5c9931ec, org.springframework.security.web.access.ExceptionTranslationFilter@407975cd, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@135359b1]
ConsumerConfig values: 
	auto.commit.interval.ms = 3000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.id = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = true
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = community-consumer-group
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	session.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

Kafka version : 2.0.1
Kafka commitId : fa14705e51bd2ce5
Cluster ID: PlpdobZhSsWqjkg6yvKfBA
ConsumerConfig values: 
	auto.commit.interval.ms = 3000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.id = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = true
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = community-consumer-group
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	session.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

Kafka version : 2.0.1
Kafka commitId : fa14705e51bd2ce5
Initializing ExecutorService
ConsumerConfig values: 
	auto.commit.interval.ms = 3000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.id = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = true
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = community-consumer-group
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	session.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

Kafka version : 2.0.1
Kafka commitId : fa14705e51bd2ce5
Cluster ID: PlpdobZhSsWqjkg6yvKfBA
[Consumer clientId=consumer-2, groupId=community-consumer-group] Discovered group coordinator DESKTOP-QPE2857:9092 (id: 2147483647 rack: null)
Cluster ID: PlpdobZhSsWqjkg6yvKfBA
[Consumer clientId=consumer-2, groupId=community-consumer-group] Revoking previously assigned partitions []
partitions revoked: []
[Consumer clientId=consumer-2, groupId=community-consumer-group] (Re-)joining group
ConsumerConfig values: 
	auto.commit.interval.ms = 3000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.id = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = true
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = community-consumer-group
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	session.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

Kafka version : 2.0.1
Kafka commitId : fa14705e51bd2ce5
Initializing ExecutorService
ConsumerConfig values: 
	auto.commit.interval.ms = 3000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.id = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = true
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = community-consumer-group
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	session.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

Cluster ID: PlpdobZhSsWqjkg6yvKfBA
Kafka version : 2.0.1
Kafka commitId : fa14705e51bd2ce5
[Consumer clientId=consumer-4, groupId=community-consumer-group] Discovered group coordinator DESKTOP-QPE2857:9092 (id: 2147483647 rack: null)
[Consumer clientId=consumer-4, groupId=community-consumer-group] Revoking previously assigned partitions []
partitions revoked: []
[Consumer clientId=consumer-4, groupId=community-consumer-group] (Re-)joining group
Cluster ID: PlpdobZhSsWqjkg6yvKfBA
[Consumer clientId=consumer-2, groupId=community-consumer-group] Successfully joined group with generation 104
[Consumer clientId=consumer-2, groupId=community-consumer-group] Setting newly assigned partitions [delete-0]
partitions assigned: [delete-0]
ConsumerConfig values: 
	auto.commit.interval.ms = 3000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.id = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = true
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = community-consumer-group
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	session.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

Kafka version : 2.0.1
Kafka commitId : fa14705e51bd2ce5
Initializing ExecutorService
Cluster ID: PlpdobZhSsWqjkg6yvKfBA
[Consumer clientId=consumer-6, groupId=community-consumer-group] Discovered group coordinator DESKTOP-QPE2857:9092 (id: 2147483647 rack: null)
[Consumer clientId=consumer-6, groupId=community-consumer-group] Revoking previously assigned partitions []
partitions revoked: []
[Consumer clientId=consumer-6, groupId=community-consumer-group] (Re-)joining group
Starting ProtocolHandler ["http-nio-8989"]
Tomcat started on port(s): 8989 (http) with context path '/community'
Started CommunityApplication in 7.845 seconds (JVM running for 9.233)
[Consumer clientId=consumer-2, groupId=community-consumer-group] Attempt to heartbeat failed since group is rebalancing
[Consumer clientId=consumer-2, groupId=community-consumer-group] Revoking previously assigned partitions [delete-0]
partitions revoked: [delete-0]
[Consumer clientId=consumer-2, groupId=community-consumer-group] (Re-)joining group
[Consumer clientId=consumer-2, groupId=community-consumer-group] Successfully joined group with generation 105
[Consumer clientId=consumer-6, groupId=community-consumer-group] Successfully joined group with generation 105
[Consumer clientId=consumer-4, groupId=community-consumer-group] Successfully joined group with generation 105
[Consumer clientId=consumer-4, groupId=community-consumer-group] Setting newly assigned partitions [publish-0]
[Consumer clientId=consumer-2, groupId=community-consumer-group] Setting newly assigned partitions [delete-0]
[Consumer clientId=consumer-6, groupId=community-consumer-group] Setting newly assigned partitions [comment-0, like-0, follow-0]
partitions assigned: [delete-0]
partitions assigned: [comment-0, like-0, follow-0]
partitions assigned: [publish-0]
Initializing Spring DispatcherServlet 'dispatcherServlet'
Initializing Servlet 'dispatcherServlet'
Completed initialization in 8 ms
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:30],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
Starting without optional epoll library
Starting without optional kqueue library
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:30],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:30],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:30],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.findAllDiscussPost].
{dataSource-1} inited
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:30],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:30],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:30],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:30],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:30],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:30],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:30],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:30],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:30],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:30],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:30],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:30],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:30],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:30],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:30],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:30],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:30],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:30],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:30],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:30],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:30],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:30],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:30],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:30],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:30],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:30],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:30],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:30],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:30],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:30],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:30],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:30],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:30],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:30],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:30],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:30],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:30],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:30],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:30],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:30],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:30],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:30],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:30],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:30],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:30],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:30],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:30],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:34],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:34],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:34],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:34],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.getDiscussPostById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:34],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:34],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:34],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:34],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:34],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:34],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:34],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:34],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:34],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:34],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:34],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:34],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:34],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:34],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:34],访问了[com.bilibili.service.impl.CommentServiceImpl.CommentCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:34],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:34],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:34],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:34],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:34],访问了[com.bilibili.service.impl.CommentServiceImpl.CommentCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:34],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:34],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:34],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:34],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:34],访问了[com.bilibili.service.impl.CommentServiceImpl.CommentCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:34],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:34],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:34],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:34],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:34],访问了[com.bilibili.service.impl.CommentServiceImpl.CommentCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:34],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:34],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:34],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:34],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:34],访问了[com.bilibili.service.impl.CommentServiceImpl.CommentCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:34],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:34],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:36],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:36],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:36],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:36],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.findAllDiscussPost].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:36],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:36],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:36],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:36],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:36],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:36],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:36],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:36],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:36],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:36],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:36],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:36],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:36],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:36],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:36],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:36],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:36],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:36],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:36],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:36],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:36],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:36],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:36],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:36],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:36],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:36],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:36],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:36],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:36],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:36],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:36],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:36],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:36],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:36],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:36],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:36],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:36],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:36],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:36],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:36],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:36],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:36],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:36],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:36],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:36],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:36],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:36],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:46],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:46],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:46],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:46],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:46],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:49],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:49],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:49],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:49],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.findAllDiscussPost].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:49],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:49],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:49],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:49],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:49],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:49],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:49],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:49],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:49],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:49],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:49],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:49],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:49],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:49],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:49],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:49],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:49],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:49],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:49],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:49],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:49],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:49],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:49],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:49],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:49],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:49],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:49],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:49],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:49],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:49],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:49],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:49],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:49],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:49],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:49],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:49],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:49],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:49],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:49],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:49],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:49],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:49],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:49],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:49],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:49],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:49],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:49],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:53],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:53],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:53],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:53],访问了[com.bilibili.service.impl.UserServiceImpl.logout].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:53],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:53],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:53],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:47:53],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:19],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:19],访问了[com.bilibili.service.impl.UserServiceImpl.login].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:19],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:19],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:19],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:19],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.findAllDiscussPost].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:19],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:19],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:19],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:19],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:19],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:19],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:19],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:19],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:19],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:19],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:19],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:19],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:19],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:19],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:19],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:19],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:19],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:19],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:19],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:19],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:19],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:19],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:19],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:19],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:19],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:19],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:19],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:19],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:19],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:19],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:19],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:19],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:19],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:19],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:19],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:19],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:19],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:19],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:19],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:19],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:19],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:19],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:19],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:19],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:19],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:19],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:19],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:24],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:24],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:24],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:24],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.getDiscussPostById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:24],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:24],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:24],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:24],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:24],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:24],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:24],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:24],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:24],访问了[com.bilibili.service.impl.CommentServiceImpl.CommentCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:24],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:24],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:24],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:24],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:24],访问了[com.bilibili.service.impl.CommentServiceImpl.CommentCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:24],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:24],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:24],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:24],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:24],访问了[com.bilibili.service.impl.CommentServiceImpl.CommentCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:24],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:24],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:24],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:24],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:24],访问了[com.bilibili.service.impl.CommentServiceImpl.CommentCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:24],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:24],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:24],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:24],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:24],访问了[com.bilibili.service.impl.CommentServiceImpl.CommentCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:24],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:24],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:27],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:27],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:27],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:27],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.findAllDiscussPost].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:27],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:27],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:27],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:27],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:27],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:27],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:27],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:27],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:27],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:27],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:27],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:27],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:27],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:27],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:27],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:27],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:27],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:27],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:27],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:27],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:27],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:27],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:27],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:27],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:27],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:27],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:27],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:27],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:27],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:27],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:27],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:27],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:27],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:27],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:27],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:27],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:27],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:27],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:27],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:27],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:27],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:27],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:27],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:27],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:27],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:27],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:27],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:32],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:32],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:32],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:32],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:32],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:48],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:48],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:48],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:49],访问了[com.bilibili.service.impl.DataServiceImpl.calculateUV].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:49],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:48:49],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:49:00],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:49:00],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:49:00],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:49:00],访问了[com.bilibili.service.impl.DataServiceImpl.calculateDAU].
服务器异常：null
java.lang.System.arraycopy(Native Method)
java.util.Arrays.copyOf(Arrays.java:3213)
java.util.ArrayList.toArray(ArrayList.java:407)
com.bilibili.service.impl.DataServiceImpl$1.doInRedis(DataServiceImpl.java:76)
org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:224)
org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:184)
org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:171)
com.bilibili.service.impl.DataServiceImpl.calculateDAU(DataServiceImpl.java:71)
com.bilibili.service.impl.DataServiceImpl$$FastClassBySpringCGLIB$$e5a5298f.invoke(<generated>)
org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
com.bilibili.service.impl.DataServiceImpl$$EnhancerBySpringCGLIB$$8a92ca04.calculateDAU(<generated>)
com.bilibili.controller.DataController.getDau(DataController.java:36)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:357)
org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:270)
org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:836)
org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1747)
org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
java.lang.Thread.run(Thread.java:748)
Resolved [java.lang.ArrayStoreException]
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:49:00],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:49:00],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:49:00],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:49:00],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:49:00],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:50:55],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:50:55],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:50:55],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:50:55],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:50:55],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:50:58],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:50:58],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:50:58],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:50:58],访问了[com.bilibili.service.impl.DataServiceImpl.calculateUV].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:50:58],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:50:58],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:51:05],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:51:05],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:51:05],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:51:05],访问了[com.bilibili.service.impl.DataServiceImpl.calculateDAU].
服务器异常：null
java.lang.System.arraycopy(Native Method)
java.util.Arrays.copyOf(Arrays.java:3213)
java.util.ArrayList.toArray(ArrayList.java:407)
com.bilibili.service.impl.DataServiceImpl$1.doInRedis(DataServiceImpl.java:76)
org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:224)
org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:184)
org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:171)
com.bilibili.service.impl.DataServiceImpl.calculateDAU(DataServiceImpl.java:71)
com.bilibili.service.impl.DataServiceImpl$$FastClassBySpringCGLIB$$e5a5298f.invoke(<generated>)
org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
com.bilibili.service.impl.DataServiceImpl$$EnhancerBySpringCGLIB$$8a92ca04.calculateDAU(<generated>)
com.bilibili.controller.DataController.getDau(DataController.java:36)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:357)
org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:270)
org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:836)
org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1747)
org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
java.lang.Thread.run(Thread.java:748)
Resolved [java.lang.ArrayStoreException]
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:51:05],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:51:05],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:51:05],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:51:05],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:51:05],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
Starting CommunityApplication on DESKTOP-QPE2857 with PID 2664 (started by 北极光。 in D:\编程\community)
No active profile set, falling back to default profiles: default
Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
Multiple Spring Data modules found, entering strict repository configuration mode!
Bootstrapping Spring Data repositories in DEFAULT mode.
Finished Spring Data repository scanning in 51ms. Found 1 repository interfaces.
Multiple Spring Data modules found, entering strict repository configuration mode!
Bootstrapping Spring Data repositories in DEFAULT mode.
Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.bilibili.mapper.ElasticsearchMapper.
Finished Spring Data repository scanning in 6ms. Found 0 repository interfaces.
Bean 'org.springframework.kafka.annotation.KafkaBootstrapConfiguration' of type [org.springframework.kafka.annotation.KafkaBootstrapConfiguration$$EnhancerBySpringCGLIB$$d6d3695d] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$32157da] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Tomcat initialized with port(s): 8989 (http)
Initializing ProtocolHandler ["http-nio-8989"]
Starting service [Tomcat]
Starting Servlet engine: [Apache Tomcat/9.0.19]
Loaded APR based Apache Tomcat Native library [1.2.23] using APR version [1.7.0].
APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].
APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
OpenSSL successfully initialized [OpenSSL 1.1.1c  28 May 2019]
Initializing Spring embedded WebApplicationContext
Root WebApplicationContext: initialization completed in 1735 ms
no modules loaded
loaded plugin [org.elasticsearch.index.reindex.ReindexPlugin]
loaded plugin [org.elasticsearch.join.ParentJoinPlugin]
loaded plugin [org.elasticsearch.percolator.PercolatorPlugin]
loaded plugin [org.elasticsearch.script.mustache.MustachePlugin]
loaded plugin [org.elasticsearch.transport.Netty4Plugin]
Adding transport node : 127.0.0.1:9300
LiveReload server is running on port 35729
Initializing ExecutorService 'applicationTaskExecutor'
Adding welcome page template: index


Using generated security password: eefb304c-a36f-4a07-910d-bb0178af8cc9

Creating filter chain: Ant [pattern='/resources/**'], []
Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@558574, org.springframework.security.web.context.SecurityContextPersistenceFilter@115b949d, org.springframework.security.web.header.HeaderWriterFilter@55823de9, org.springframework.security.web.authentication.logout.LogoutFilter@65141f08, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@7e18ebf9, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@700fa107, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@571ada9, org.springframework.security.web.session.SessionManagementFilter@2fe5d907, org.springframework.security.web.access.ExceptionTranslationFilter@6965827f, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@1e022755]
ConsumerConfig values: 
	auto.commit.interval.ms = 3000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.id = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = true
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = community-consumer-group
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	session.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

Kafka version : 2.0.1
Kafka commitId : fa14705e51bd2ce5
Cluster ID: PlpdobZhSsWqjkg6yvKfBA
ConsumerConfig values: 
	auto.commit.interval.ms = 3000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.id = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = true
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = community-consumer-group
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	session.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

Kafka version : 2.0.1
Kafka commitId : fa14705e51bd2ce5
Initializing ExecutorService
ConsumerConfig values: 
	auto.commit.interval.ms = 3000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.id = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = true
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = community-consumer-group
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	session.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

Kafka version : 2.0.1
Kafka commitId : fa14705e51bd2ce5
Cluster ID: PlpdobZhSsWqjkg6yvKfBA
[Consumer clientId=consumer-2, groupId=community-consumer-group] Discovered group coordinator DESKTOP-QPE2857:9092 (id: 2147483647 rack: null)
Cluster ID: PlpdobZhSsWqjkg6yvKfBA
[Consumer clientId=consumer-2, groupId=community-consumer-group] Revoking previously assigned partitions []
partitions revoked: []
[Consumer clientId=consumer-2, groupId=community-consumer-group] (Re-)joining group
ConsumerConfig values: 
	auto.commit.interval.ms = 3000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.id = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = true
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = community-consumer-group
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	session.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

Kafka version : 2.0.1
Kafka commitId : fa14705e51bd2ce5
Initializing ExecutorService
ConsumerConfig values: 
	auto.commit.interval.ms = 3000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.id = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = true
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = community-consumer-group
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	session.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

[Consumer clientId=consumer-2, groupId=community-consumer-group] Successfully joined group with generation 107
Cluster ID: PlpdobZhSsWqjkg6yvKfBA
[Consumer clientId=consumer-4, groupId=community-consumer-group] Discovered group coordinator DESKTOP-QPE2857:9092 (id: 2147483647 rack: null)
[Consumer clientId=consumer-2, groupId=community-consumer-group] Setting newly assigned partitions [publish-0]
Kafka version : 2.0.1
Kafka commitId : fa14705e51bd2ce5
[Consumer clientId=consumer-4, groupId=community-consumer-group] Revoking previously assigned partitions []
partitions revoked: []
[Consumer clientId=consumer-4, groupId=community-consumer-group] (Re-)joining group
Cluster ID: PlpdobZhSsWqjkg6yvKfBA
ConsumerConfig values: 
	auto.commit.interval.ms = 3000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.id = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = true
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = community-consumer-group
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	session.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

partitions assigned: [publish-0]
Kafka version : 2.0.1
Kafka commitId : fa14705e51bd2ce5
Initializing ExecutorService
Cluster ID: PlpdobZhSsWqjkg6yvKfBA
[Consumer clientId=consumer-6, groupId=community-consumer-group] Discovered group coordinator DESKTOP-QPE2857:9092 (id: 2147483647 rack: null)
[Consumer clientId=consumer-6, groupId=community-consumer-group] Revoking previously assigned partitions []
partitions revoked: []
[Consumer clientId=consumer-6, groupId=community-consumer-group] (Re-)joining group
Starting ProtocolHandler ["http-nio-8989"]
Tomcat started on port(s): 8989 (http) with context path '/community'
Started CommunityApplication in 6.956 seconds (JVM running for 8.188)
[Consumer clientId=consumer-2, groupId=community-consumer-group] Attempt to heartbeat failed since group is rebalancing
[Consumer clientId=consumer-2, groupId=community-consumer-group] Revoking previously assigned partitions [publish-0]
partitions revoked: [publish-0]
[Consumer clientId=consumer-2, groupId=community-consumer-group] (Re-)joining group
[Consumer clientId=consumer-2, groupId=community-consumer-group] Successfully joined group with generation 108
[Consumer clientId=consumer-6, groupId=community-consumer-group] Successfully joined group with generation 108
[Consumer clientId=consumer-4, groupId=community-consumer-group] Successfully joined group with generation 108
[Consumer clientId=consumer-2, groupId=community-consumer-group] Setting newly assigned partitions [publish-0]
[Consumer clientId=consumer-6, groupId=community-consumer-group] Setting newly assigned partitions [delete-0]
[Consumer clientId=consumer-4, groupId=community-consumer-group] Setting newly assigned partitions [comment-0, like-0, follow-0]
partitions assigned: [publish-0]
partitions assigned: [delete-0]
partitions assigned: [comment-0, like-0, follow-0]
Initializing Spring DispatcherServlet 'dispatcherServlet'
Initializing Servlet 'dispatcherServlet'
Completed initialization in 9 ms
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:53:42],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
Starting without optional epoll library
Starting without optional kqueue library
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:53:42],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:53:42],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:53:42],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
{dataSource-1} inited
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:53:42],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:53:42],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:53:42],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:53:42],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:53:57],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:53:57],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:53:57],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:53:57],访问了[com.bilibili.service.impl.UserServiceImpl.login].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:53:57],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:53:57],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:53:57],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:53:57],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:53:57],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:53:57],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.findAllDiscussPost].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:53:57],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:53:57],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:53:57],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:53:57],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:53:57],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:53:57],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:53:57],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:53:57],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:53:57],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:53:57],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:53:57],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:53:57],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:53:57],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:53:57],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:53:57],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:53:57],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:53:57],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:53:57],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:53:57],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:53:57],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:53:57],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:53:57],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:53:57],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:53:57],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:53:57],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:53:57],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:53:57],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:53:57],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:53:57],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:53:57],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:53:57],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:53:57],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:53:57],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:53:57],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:53:57],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:53:57],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:53:57],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:53:57],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:53:57],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:53:57],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:53:57],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:53:57],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:53:57],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:53:57],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:53:57],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:53:57],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:53:57],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:54:09],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:54:09],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:54:09],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:54:09],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:54:09],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:54:19],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:54:19],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:54:19],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:54:19],访问了[com.bilibili.service.impl.DataServiceImpl.calculateDAU].
[Consumer clientId=consumer-2, groupId=community-consumer-group] Group coordinator DESKTOP-QPE2857:9092 (id: 2147483647 rack: null) is unavailable or invalid, will attempt rediscovery
[Consumer clientId=consumer-4, groupId=community-consumer-group] Group coordinator DESKTOP-QPE2857:9092 (id: 2147483647 rack: null) is unavailable or invalid, will attempt rediscovery
[Consumer clientId=consumer-6, groupId=community-consumer-group] Group coordinator DESKTOP-QPE2857:9092 (id: 2147483647 rack: null) is unavailable or invalid, will attempt rediscovery
[Consumer clientId=consumer-2, groupId=community-consumer-group] Discovered group coordinator DESKTOP-QPE2857:9092 (id: 2147483647 rack: null)
[Consumer clientId=consumer-4, groupId=community-consumer-group] Discovered group coordinator DESKTOP-QPE2857:9092 (id: 2147483647 rack: null)
[Consumer clientId=consumer-2, groupId=community-consumer-group] Group coordinator DESKTOP-QPE2857:9092 (id: 2147483647 rack: null) is unavailable or invalid, will attempt rediscovery
[Consumer clientId=consumer-4, groupId=community-consumer-group] Group coordinator DESKTOP-QPE2857:9092 (id: 2147483647 rack: null) is unavailable or invalid, will attempt rediscovery
[Consumer clientId=consumer-6, groupId=community-consumer-group] Discovered group coordinator DESKTOP-QPE2857:9092 (id: 2147483647 rack: null)
[Consumer clientId=consumer-6, groupId=community-consumer-group] Group coordinator DESKTOP-QPE2857:9092 (id: 2147483647 rack: null) is unavailable or invalid, will attempt rediscovery
服务器异常：null
java.lang.System.arraycopy(Native Method)
java.util.Arrays.copyOf(Arrays.java:3213)
java.util.ArrayList.toArray(ArrayList.java:407)
com.bilibili.service.impl.DataServiceImpl$1.doInRedis(DataServiceImpl.java:77)
org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:224)
org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:184)
org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:171)
com.bilibili.service.impl.DataServiceImpl.calculateDAU(DataServiceImpl.java:72)
com.bilibili.service.impl.DataServiceImpl$$FastClassBySpringCGLIB$$e5a5298f.invoke(<generated>)
org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
com.bilibili.service.impl.DataServiceImpl$$EnhancerBySpringCGLIB$$1cdbe3a6.calculateDAU(<generated>)
com.bilibili.controller.DataController.getDau(DataController.java:36)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:357)
org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:270)
org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:836)
org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1747)
org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
java.lang.Thread.run(Thread.java:748)
Resolved [java.lang.ArrayStoreException]
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:55:05],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:55:05],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:55:05],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:55:05],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:55:05],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
[Consumer clientId=consumer-6, groupId=community-consumer-group] Discovered group coordinator DESKTOP-QPE2857:9092 (id: 2147483647 rack: null)
[Consumer clientId=consumer-4, groupId=community-consumer-group] Discovered group coordinator DESKTOP-QPE2857:9092 (id: 2147483647 rack: null)
[Consumer clientId=consumer-2, groupId=community-consumer-group] Discovered group coordinator DESKTOP-QPE2857:9092 (id: 2147483647 rack: null)
[Consumer clientId=consumer-2, groupId=community-consumer-group] Offset commit failed on partition publish-0 at offset 9: The coordinator is not aware of this member.
[Consumer clientId=consumer-6, groupId=community-consumer-group] Offset commit failed on partition delete-0 at offset 1: The coordinator is not aware of this member.
[Consumer clientId=consumer-4, groupId=community-consumer-group] Offset commit failed on partition comment-0 at offset 0: The coordinator is not aware of this member.
[Consumer clientId=consumer-2, groupId=community-consumer-group] Asynchronous auto-commit of offsets {publish-0=OffsetAndMetadata{offset=9, metadata=''}} failed: Commit cannot be completed since the group has already rebalanced and assigned the partitions to another member. This means that the time between subsequent calls to poll() was longer than the configured max.poll.interval.ms, which typically implies that the poll loop is spending too much time message processing. You can address this either by increasing the session timeout or by reducing the maximum size of batches returned in poll() with max.poll.records.
[Consumer clientId=consumer-6, groupId=community-consumer-group] Asynchronous auto-commit of offsets {delete-0=OffsetAndMetadata{offset=1, metadata=''}} failed: Commit cannot be completed since the group has already rebalanced and assigned the partitions to another member. This means that the time between subsequent calls to poll() was longer than the configured max.poll.interval.ms, which typically implies that the poll loop is spending too much time message processing. You can address this either by increasing the session timeout or by reducing the maximum size of batches returned in poll() with max.poll.records.
[Consumer clientId=consumer-4, groupId=community-consumer-group] Asynchronous auto-commit of offsets {comment-0=OffsetAndMetadata{offset=0, metadata=''}, like-0=OffsetAndMetadata{offset=1, metadata=''}, follow-0=OffsetAndMetadata{offset=0, metadata=''}} failed: Commit cannot be completed since the group has already rebalanced and assigned the partitions to another member. This means that the time between subsequent calls to poll() was longer than the configured max.poll.interval.ms, which typically implies that the poll loop is spending too much time message processing. You can address this either by increasing the session timeout or by reducing the maximum size of batches returned in poll() with max.poll.records.
[Consumer clientId=consumer-6, groupId=community-consumer-group] Synchronous auto-commit of offsets {delete-0=OffsetAndMetadata{offset=1, metadata=''}} failed: Commit cannot be completed since the group has already rebalanced and assigned the partitions to another member. This means that the time between subsequent calls to poll() was longer than the configured max.poll.interval.ms, which typically implies that the poll loop is spending too much time message processing. You can address this either by increasing the session timeout or by reducing the maximum size of batches returned in poll() with max.poll.records.
[Consumer clientId=consumer-4, groupId=community-consumer-group] Synchronous auto-commit of offsets {comment-0=OffsetAndMetadata{offset=0, metadata=''}, like-0=OffsetAndMetadata{offset=1, metadata=''}, follow-0=OffsetAndMetadata{offset=0, metadata=''}} failed: Commit cannot be completed since the group has already rebalanced and assigned the partitions to another member. This means that the time between subsequent calls to poll() was longer than the configured max.poll.interval.ms, which typically implies that the poll loop is spending too much time message processing. You can address this either by increasing the session timeout or by reducing the maximum size of batches returned in poll() with max.poll.records.
[Consumer clientId=consumer-6, groupId=community-consumer-group] Revoking previously assigned partitions [delete-0]
[Consumer clientId=consumer-2, groupId=community-consumer-group] Synchronous auto-commit of offsets {publish-0=OffsetAndMetadata{offset=9, metadata=''}} failed: Commit cannot be completed since the group has already rebalanced and assigned the partitions to another member. This means that the time between subsequent calls to poll() was longer than the configured max.poll.interval.ms, which typically implies that the poll loop is spending too much time message processing. You can address this either by increasing the session timeout or by reducing the maximum size of batches returned in poll() with max.poll.records.
partitions revoked: [delete-0]
[Consumer clientId=consumer-2, groupId=community-consumer-group] Revoking previously assigned partitions [publish-0]
[Consumer clientId=consumer-4, groupId=community-consumer-group] Revoking previously assigned partitions [comment-0, like-0, follow-0]
[Consumer clientId=consumer-6, groupId=community-consumer-group] (Re-)joining group
partitions revoked: [publish-0]
partitions revoked: [comment-0, like-0, follow-0]
[Consumer clientId=consumer-2, groupId=community-consumer-group] (Re-)joining group
[Consumer clientId=consumer-4, groupId=community-consumer-group] (Re-)joining group
[Consumer clientId=consumer-4, groupId=community-consumer-group] Successfully joined group with generation 110
[Consumer clientId=consumer-6, groupId=community-consumer-group] Successfully joined group with generation 110
[Consumer clientId=consumer-4, groupId=community-consumer-group] Setting newly assigned partitions [comment-0, like-0, follow-0]
[Consumer clientId=consumer-6, groupId=community-consumer-group] Setting newly assigned partitions [delete-0]
[Consumer clientId=consumer-2, groupId=community-consumer-group] Successfully joined group with generation 110
[Consumer clientId=consumer-2, groupId=community-consumer-group] Setting newly assigned partitions [publish-0]
partitions assigned: [publish-0]
partitions assigned: [comment-0, like-0, follow-0]
partitions assigned: [delete-0]
Shutting down ExecutorService
Shutting down ExecutorService
Shutting down ExecutorService
Consumer stopped
Consumer stopped
Consumer stopped
Shutting down ExecutorService 'applicationTaskExecutor'
{dataSource-1} closing ...
{dataSource-1} closed
Starting CommunityApplication on DESKTOP-QPE2857 with PID 21840 (started by 北极光。 in D:\编程\community)
No active profile set, falling back to default profiles: default
Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
Multiple Spring Data modules found, entering strict repository configuration mode!
Bootstrapping Spring Data repositories in DEFAULT mode.
Finished Spring Data repository scanning in 55ms. Found 1 repository interfaces.
Multiple Spring Data modules found, entering strict repository configuration mode!
Bootstrapping Spring Data repositories in DEFAULT mode.
Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.bilibili.mapper.ElasticsearchMapper.
Finished Spring Data repository scanning in 6ms. Found 0 repository interfaces.
Bean 'org.springframework.kafka.annotation.KafkaBootstrapConfiguration' of type [org.springframework.kafka.annotation.KafkaBootstrapConfiguration$$EnhancerBySpringCGLIB$$cd1104ec] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$f95ef369] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Tomcat initialized with port(s): 8989 (http)
Initializing ProtocolHandler ["http-nio-8989"]
Starting service [Tomcat]
Starting Servlet engine: [Apache Tomcat/9.0.19]
Loaded APR based Apache Tomcat Native library [1.2.23] using APR version [1.7.0].
APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].
APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
OpenSSL successfully initialized [OpenSSL 1.1.1c  28 May 2019]
Initializing Spring embedded WebApplicationContext
Root WebApplicationContext: initialization completed in 1846 ms
Cannot deserialize session attribute [SPRING_SECURITY_CONTEXT] for session [766E2DB6B4E04CDFDE907FA387541FB0]
Exception loading sessions from persistent storage
java.lang.ClassCastException: java.io.ObjectStreamClass cannot be cast to java.lang.String
	at java.io.ObjectInputStream.readTypeString(ObjectInputStream.java:1612)
	at java.io.ObjectStreamClass.readNonProxy(ObjectStreamClass.java:719)
	at java.io.ObjectInputStream.readClassDescriptor(ObjectInputStream.java:882)
	at java.io.ObjectInputStream.readNonProxyDesc(ObjectInputStream.java:1815)
	at java.io.ObjectInputStream.readClassDesc(ObjectInputStream.java:1713)
	at java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:2000)
	at java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1535)
	at java.io.ObjectInputStream.readObject(ObjectInputStream.java:422)
	at org.apache.catalina.session.StandardSession.doReadObject(StandardSession.java:1576)
	at org.apache.catalina.session.StandardSession.readObjectData(StandardSession.java:1048)
	at org.apache.catalina.session.StandardManager.doLoad(StandardManager.java:218)
	at org.apache.catalina.session.StandardManager.load(StandardManager.java:162)
	at org.apache.catalina.session.StandardManager.startInternal(StandardManager.java:354)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)
	at org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5167)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1377)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1367)
	at java.util.concurrent.FutureTask.run$$$capture(FutureTask.java:266)
	at java.util.concurrent.FutureTask.run(FutureTask.java)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:134)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:902)
	at org.apache.catalina.core.StandardHost.startInternal(StandardHost.java:831)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1377)
	at org.apache.catalina.core.ContainerBase$StartChild.call(ContainerBase.java:1367)
	at java.util.concurrent.FutureTask.run$$$capture(FutureTask.java:266)
	at java.util.concurrent.FutureTask.run(FutureTask.java)
	at org.apache.tomcat.util.threads.InlineExecutorService.execute(InlineExecutorService.java:75)
	at java.util.concurrent.AbstractExecutorService.submit(AbstractExecutorService.java:134)
	at org.apache.catalina.core.ContainerBase.startInternal(ContainerBase.java:902)
	at org.apache.catalina.core.StandardEngine.startInternal(StandardEngine.java:262)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)
	at org.apache.catalina.core.StandardService.startInternal(StandardService.java:423)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)
	at org.apache.catalina.core.StandardServer.startInternal(StandardServer.java:932)
	at org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:183)
	at org.apache.catalina.startup.Tomcat.start(Tomcat.java:455)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.initialize(TomcatWebServer.java:106)
	at org.springframework.boot.web.embedded.tomcat.TomcatWebServer.<init>(TomcatWebServer.java:86)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getTomcatWebServer(TomcatServletWebServerFactory.java:427)
	at org.springframework.boot.web.embedded.tomcat.TomcatServletWebServerFactory.getWebServer(TomcatServletWebServerFactory.java:180)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.createWebServer(ServletWebServerApplicationContext.java:181)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.onRefresh(ServletWebServerApplicationContext.java:154)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:543)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:142)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:775)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:316)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1260)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1248)
	at com.bilibili.CommunityApplication.main(CommunityApplication.java:12)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
no modules loaded
loaded plugin [org.elasticsearch.index.reindex.ReindexPlugin]
loaded plugin [org.elasticsearch.join.ParentJoinPlugin]
loaded plugin [org.elasticsearch.percolator.PercolatorPlugin]
loaded plugin [org.elasticsearch.script.mustache.MustachePlugin]
loaded plugin [org.elasticsearch.transport.Netty4Plugin]
Adding transport node : 127.0.0.1:9300
LiveReload server is running on port 35729
Initializing ExecutorService 'applicationTaskExecutor'
Adding welcome page template: index


Using generated security password: b3fc5b53-9c79-4d99-b2db-14a0df98cdc2

Creating filter chain: Ant [pattern='/resources/**'], []
Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@303518e3, org.springframework.security.web.context.SecurityContextPersistenceFilter@168ebdd1, org.springframework.security.web.header.HeaderWriterFilter@7a7de419, org.springframework.security.web.authentication.logout.LogoutFilter@2b9732b8, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@d2d4fd7, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@55d191b9, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@3c5d002d, org.springframework.security.web.session.SessionManagementFilter@95ad141, org.springframework.security.web.access.ExceptionTranslationFilter@22dbd450, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@30ec4ecf]
ConsumerConfig values: 
	auto.commit.interval.ms = 3000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.id = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = true
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = community-consumer-group
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	session.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

Kafka version : 2.0.1
Kafka commitId : fa14705e51bd2ce5
Cluster ID: PlpdobZhSsWqjkg6yvKfBA
ConsumerConfig values: 
	auto.commit.interval.ms = 3000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.id = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = true
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = community-consumer-group
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	session.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

Kafka version : 2.0.1
Kafka commitId : fa14705e51bd2ce5
Initializing ExecutorService
ConsumerConfig values: 
	auto.commit.interval.ms = 3000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.id = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = true
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = community-consumer-group
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	session.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

Kafka version : 2.0.1
Kafka commitId : fa14705e51bd2ce5
Cluster ID: PlpdobZhSsWqjkg6yvKfBA
[Consumer clientId=consumer-2, groupId=community-consumer-group] Discovered group coordinator DESKTOP-QPE2857:9092 (id: 2147483647 rack: null)
Cluster ID: PlpdobZhSsWqjkg6yvKfBA
[Consumer clientId=consumer-2, groupId=community-consumer-group] Revoking previously assigned partitions []
partitions revoked: []
[Consumer clientId=consumer-2, groupId=community-consumer-group] (Re-)joining group
ConsumerConfig values: 
	auto.commit.interval.ms = 3000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.id = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = true
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = community-consumer-group
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	session.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

Kafka version : 2.0.1
Kafka commitId : fa14705e51bd2ce5
Initializing ExecutorService
ConsumerConfig values: 
	auto.commit.interval.ms = 3000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.id = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = true
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = community-consumer-group
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	session.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

Cluster ID: PlpdobZhSsWqjkg6yvKfBA
[Consumer clientId=consumer-4, groupId=community-consumer-group] Discovered group coordinator DESKTOP-QPE2857:9092 (id: 2147483647 rack: null)
Kafka version : 2.0.1
Kafka commitId : fa14705e51bd2ce5
[Consumer clientId=consumer-4, groupId=community-consumer-group] Revoking previously assigned partitions []
partitions revoked: []
[Consumer clientId=consumer-4, groupId=community-consumer-group] (Re-)joining group
[Consumer clientId=consumer-2, groupId=community-consumer-group] Successfully joined group with generation 112
[Consumer clientId=consumer-2, groupId=community-consumer-group] Setting newly assigned partitions [delete-0]
Cluster ID: PlpdobZhSsWqjkg6yvKfBA
partitions assigned: [delete-0]
ConsumerConfig values: 
	auto.commit.interval.ms = 3000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.id = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = true
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = community-consumer-group
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	session.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

Kafka version : 2.0.1
Kafka commitId : fa14705e51bd2ce5
Initializing ExecutorService
Cluster ID: PlpdobZhSsWqjkg6yvKfBA
[Consumer clientId=consumer-6, groupId=community-consumer-group] Discovered group coordinator DESKTOP-QPE2857:9092 (id: 2147483647 rack: null)
[Consumer clientId=consumer-6, groupId=community-consumer-group] Revoking previously assigned partitions []
partitions revoked: []
[Consumer clientId=consumer-6, groupId=community-consumer-group] (Re-)joining group
Starting ProtocolHandler ["http-nio-8989"]
Tomcat started on port(s): 8989 (http) with context path '/community'
Started CommunityApplication in 6.966 seconds (JVM running for 8.131)
[Consumer clientId=consumer-2, groupId=community-consumer-group] Attempt to heartbeat failed since group is rebalancing
[Consumer clientId=consumer-2, groupId=community-consumer-group] Revoking previously assigned partitions [delete-0]
partitions revoked: [delete-0]
[Consumer clientId=consumer-2, groupId=community-consumer-group] (Re-)joining group
[Consumer clientId=consumer-2, groupId=community-consumer-group] Successfully joined group with generation 113
[Consumer clientId=consumer-4, groupId=community-consumer-group] Successfully joined group with generation 113
[Consumer clientId=consumer-6, groupId=community-consumer-group] Successfully joined group with generation 113
[Consumer clientId=consumer-4, groupId=community-consumer-group] Setting newly assigned partitions [publish-0]
[Consumer clientId=consumer-2, groupId=community-consumer-group] Setting newly assigned partitions [delete-0]
[Consumer clientId=consumer-6, groupId=community-consumer-group] Setting newly assigned partitions [comment-0, like-0, follow-0]
partitions assigned: [delete-0]
partitions assigned: [publish-0]
partitions assigned: [comment-0, like-0, follow-0]
Initializing Spring DispatcherServlet 'dispatcherServlet'
Initializing Servlet 'dispatcherServlet'
Completed initialization in 9 ms
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:56:14],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
Starting without optional epoll library
Starting without optional kqueue library
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:56:14],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:56:14],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:56:14],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
{dataSource-1} inited
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:56:14],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:56:14],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:56:14],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:56:14],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:56:21],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:56:21],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:56:21],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:56:21],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.findAllDiscussPost].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:56:21],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:56:21],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:56:21],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:56:21],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:56:21],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:56:21],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:56:21],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:56:21],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:56:21],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:56:21],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:56:21],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:56:21],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:56:21],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:56:21],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:56:21],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:56:21],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:56:21],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:56:21],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:56:21],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:56:21],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:56:21],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:56:21],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:56:21],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:56:21],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:56:21],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:56:21],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:56:21],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:56:21],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:56:21],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:56:21],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:56:21],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:56:21],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:56:21],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:56:21],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:56:21],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:56:21],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:56:21],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:56:21],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:56:21],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:56:21],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:56:21],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:56:21],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:56:21],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:56:21],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:56:21],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:56:21],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:56:21],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:56:27],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:56:27],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:56:27],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:56:27],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:56:27],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:56:35],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:56:35],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:56:35],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:56:35],访问了[com.bilibili.service.impl.DataServiceImpl.calculateDAU].
[Consumer clientId=consumer-6, groupId=community-consumer-group] Group coordinator DESKTOP-QPE2857:9092 (id: 2147483647 rack: null) is unavailable or invalid, will attempt rediscovery
[Consumer clientId=consumer-4, groupId=community-consumer-group] Group coordinator DESKTOP-QPE2857:9092 (id: 2147483647 rack: null) is unavailable or invalid, will attempt rediscovery
[Consumer clientId=consumer-2, groupId=community-consumer-group] Group coordinator DESKTOP-QPE2857:9092 (id: 2147483647 rack: null) is unavailable or invalid, will attempt rediscovery
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:59:27],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
[Consumer clientId=consumer-2, groupId=community-consumer-group] Discovered group coordinator DESKTOP-QPE2857:9092 (id: 2147483647 rack: null)
[Consumer clientId=consumer-2, groupId=community-consumer-group] Group coordinator DESKTOP-QPE2857:9092 (id: 2147483647 rack: null) is unavailable or invalid, will attempt rediscovery
[Consumer clientId=consumer-6, groupId=community-consumer-group] Discovered group coordinator DESKTOP-QPE2857:9092 (id: 2147483647 rack: null)
[Consumer clientId=consumer-4, groupId=community-consumer-group] Discovered group coordinator DESKTOP-QPE2857:9092 (id: 2147483647 rack: null)
[Consumer clientId=consumer-6, groupId=community-consumer-group] Group coordinator DESKTOP-QPE2857:9092 (id: 2147483647 rack: null) is unavailable or invalid, will attempt rediscovery
[Consumer clientId=consumer-4, groupId=community-consumer-group] Group coordinator DESKTOP-QPE2857:9092 (id: 2147483647 rack: null) is unavailable or invalid, will attempt rediscovery
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:59:27],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:59:27],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:59:27],访问了[com.bilibili.service.impl.DataServiceImpl.calculateDAU].
服务器异常：null
服务器异常：null
java.lang.System.arraycopy(Native Method)
java.lang.System.arraycopy(Native Method)
java.util.Arrays.copyOf(Arrays.java:3213)
java.util.Arrays.copyOf(Arrays.java:3213)
java.util.ArrayList.toArray(ArrayList.java:407)
com.bilibili.service.impl.DataServiceImpl$1.doInRedis(DataServiceImpl.java:77)
java.util.ArrayList.toArray(ArrayList.java:407)
org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:224)
com.bilibili.service.impl.DataServiceImpl$1.doInRedis(DataServiceImpl.java:77)
org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:224)
org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:184)
org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:184)
org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:171)
org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:171)
com.bilibili.service.impl.DataServiceImpl.calculateDAU(DataServiceImpl.java:72)
com.bilibili.service.impl.DataServiceImpl.calculateDAU(DataServiceImpl.java:72)
com.bilibili.service.impl.DataServiceImpl$$FastClassBySpringCGLIB$$e5a5298f.invoke(<generated>)
com.bilibili.service.impl.DataServiceImpl$$FastClassBySpringCGLIB$$e5a5298f.invoke(<generated>)
org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
com.bilibili.service.impl.DataServiceImpl$$EnhancerBySpringCGLIB$$54088912.calculateDAU(<generated>)
com.bilibili.controller.DataController.getDau(DataController.java:36)
org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
com.bilibili.service.impl.DataServiceImpl$$EnhancerBySpringCGLIB$$54088912.calculateDAU(<generated>)
com.bilibili.controller.DataController.getDau(DataController.java:36)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
java.lang.reflect.Method.invoke(Method.java:498)
org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:357)
org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:270)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:357)
org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:270)
org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:836)
org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1747)
org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
java.lang.Thread.run(Thread.java:748)
org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
Resolved [java.lang.ArrayStoreException]
org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:836)
org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1747)
org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
java.lang.Thread.run(Thread.java:748)
Resolved [java.lang.ArrayStoreException]
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:59:27],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:59:27],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:59:27],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:59:27],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:59:28],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
[Consumer clientId=consumer-2, groupId=community-consumer-group] Discovered group coordinator DESKTOP-QPE2857:9092 (id: 2147483647 rack: null)
[Consumer clientId=consumer-6, groupId=community-consumer-group] Discovered group coordinator DESKTOP-QPE2857:9092 (id: 2147483647 rack: null)
[Consumer clientId=consumer-4, groupId=community-consumer-group] Discovered group coordinator DESKTOP-QPE2857:9092 (id: 2147483647 rack: null)
[Consumer clientId=consumer-6, groupId=community-consumer-group] Offset commit failed on partition comment-0 at offset 0: The coordinator is not aware of this member.
[Consumer clientId=consumer-2, groupId=community-consumer-group] Offset commit failed on partition delete-0 at offset 1: The coordinator is not aware of this member.
[Consumer clientId=consumer-4, groupId=community-consumer-group] Offset commit failed on partition publish-0 at offset 9: The coordinator is not aware of this member.
[Consumer clientId=consumer-6, groupId=community-consumer-group] Asynchronous auto-commit of offsets {comment-0=OffsetAndMetadata{offset=0, metadata=''}, like-0=OffsetAndMetadata{offset=1, metadata=''}, follow-0=OffsetAndMetadata{offset=0, metadata=''}} failed: Commit cannot be completed since the group has already rebalanced and assigned the partitions to another member. This means that the time between subsequent calls to poll() was longer than the configured max.poll.interval.ms, which typically implies that the poll loop is spending too much time message processing. You can address this either by increasing the session timeout or by reducing the maximum size of batches returned in poll() with max.poll.records.
[Consumer clientId=consumer-2, groupId=community-consumer-group] Asynchronous auto-commit of offsets {delete-0=OffsetAndMetadata{offset=1, metadata=''}} failed: Commit cannot be completed since the group has already rebalanced and assigned the partitions to another member. This means that the time between subsequent calls to poll() was longer than the configured max.poll.interval.ms, which typically implies that the poll loop is spending too much time message processing. You can address this either by increasing the session timeout or by reducing the maximum size of batches returned in poll() with max.poll.records.
[Consumer clientId=consumer-4, groupId=community-consumer-group] Asynchronous auto-commit of offsets {publish-0=OffsetAndMetadata{offset=9, metadata=''}} failed: Commit cannot be completed since the group has already rebalanced and assigned the partitions to another member. This means that the time between subsequent calls to poll() was longer than the configured max.poll.interval.ms, which typically implies that the poll loop is spending too much time message processing. You can address this either by increasing the session timeout or by reducing the maximum size of batches returned in poll() with max.poll.records.
[Consumer clientId=consumer-2, groupId=community-consumer-group] Synchronous auto-commit of offsets {delete-0=OffsetAndMetadata{offset=1, metadata=''}} failed: Commit cannot be completed since the group has already rebalanced and assigned the partitions to another member. This means that the time between subsequent calls to poll() was longer than the configured max.poll.interval.ms, which typically implies that the poll loop is spending too much time message processing. You can address this either by increasing the session timeout or by reducing the maximum size of batches returned in poll() with max.poll.records.
[Consumer clientId=consumer-4, groupId=community-consumer-group] Synchronous auto-commit of offsets {publish-0=OffsetAndMetadata{offset=9, metadata=''}} failed: Commit cannot be completed since the group has already rebalanced and assigned the partitions to another member. This means that the time between subsequent calls to poll() was longer than the configured max.poll.interval.ms, which typically implies that the poll loop is spending too much time message processing. You can address this either by increasing the session timeout or by reducing the maximum size of batches returned in poll() with max.poll.records.
[Consumer clientId=consumer-2, groupId=community-consumer-group] Revoking previously assigned partitions [delete-0]
[Consumer clientId=consumer-6, groupId=community-consumer-group] Synchronous auto-commit of offsets {comment-0=OffsetAndMetadata{offset=0, metadata=''}, like-0=OffsetAndMetadata{offset=1, metadata=''}, follow-0=OffsetAndMetadata{offset=0, metadata=''}} failed: Commit cannot be completed since the group has already rebalanced and assigned the partitions to another member. This means that the time between subsequent calls to poll() was longer than the configured max.poll.interval.ms, which typically implies that the poll loop is spending too much time message processing. You can address this either by increasing the session timeout or by reducing the maximum size of batches returned in poll() with max.poll.records.
[Consumer clientId=consumer-4, groupId=community-consumer-group] Revoking previously assigned partitions [publish-0]
partitions revoked: [delete-0]
partitions revoked: [publish-0]
[Consumer clientId=consumer-6, groupId=community-consumer-group] Revoking previously assigned partitions [comment-0, like-0, follow-0]
[Consumer clientId=consumer-2, groupId=community-consumer-group] (Re-)joining group
[Consumer clientId=consumer-4, groupId=community-consumer-group] (Re-)joining group
partitions revoked: [comment-0, like-0, follow-0]
[Consumer clientId=consumer-6, groupId=community-consumer-group] (Re-)joining group
[Consumer clientId=consumer-2, groupId=community-consumer-group] Successfully joined group with generation 115
[Consumer clientId=consumer-4, groupId=community-consumer-group] Successfully joined group with generation 115
[Consumer clientId=consumer-6, groupId=community-consumer-group] Successfully joined group with generation 115
[Consumer clientId=consumer-2, groupId=community-consumer-group] Setting newly assigned partitions [delete-0]
[Consumer clientId=consumer-4, groupId=community-consumer-group] Setting newly assigned partitions [publish-0]
[Consumer clientId=consumer-6, groupId=community-consumer-group] Setting newly assigned partitions [comment-0, like-0, follow-0]
partitions assigned: [delete-0]
partitions assigned: [comment-0, like-0, follow-0]
partitions assigned: [publish-0]
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:59:31],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:59:31],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:59:31],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:59:31],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:59:31],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:59:33],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:59:33],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:59:33],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:59:33],访问了[com.bilibili.service.impl.DataServiceImpl.calculateDAU].
服务器异常：null
java.lang.System.arraycopy(Native Method)
java.util.Arrays.copyOf(Arrays.java:3213)
java.util.ArrayList.toArray(ArrayList.java:407)
com.bilibili.service.impl.DataServiceImpl$1.doInRedis(DataServiceImpl.java:77)
org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:224)
org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:184)
org.springframework.data.redis.core.RedisTemplate.execute(RedisTemplate.java:171)
com.bilibili.service.impl.DataServiceImpl.calculateDAU(DataServiceImpl.java:72)
com.bilibili.service.impl.DataServiceImpl$$FastClassBySpringCGLIB$$e5a5298f.invoke(<generated>)
org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:218)
org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:749)
org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:163)
org.springframework.aop.framework.adapter.MethodBeforeAdviceInterceptor.invoke(MethodBeforeAdviceInterceptor.java:56)
org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:93)
org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)
org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688)
com.bilibili.service.impl.DataServiceImpl$$EnhancerBySpringCGLIB$$54088912.calculateDAU(<generated>)
com.bilibili.controller.DataController.getDau(DataController.java:36)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190)
org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138)
org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)
org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892)
org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797)
org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87)
org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039)
org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942)
org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005)
org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:908)
javax.servlet.http.HttpServlet.service(HttpServlet.java:660)
org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882)
javax.servlet.http.HttpServlet.service(HttpServlet.java:741)
org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:231)
org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:53)
org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:320)
org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:127)
org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:91)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:119)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:137)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:111)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:170)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:63)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:116)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:74)
org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:105)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:56)
org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:334)
org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:215)
org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:178)
org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:357)
org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:270)
org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)
org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92)
org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93)
org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200)
org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:193)
org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:166)
org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:200)
org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:96)
org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:490)
org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:139)
org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:92)
org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74)
org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:343)
org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:408)
org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)
org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:836)
org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1747)
org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)
java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)
java.lang.Thread.run(Thread.java:748)
Resolved [java.lang.ArrayStoreException]
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:59:33],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:59:33],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:59:33],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:59:33],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 22:59:33],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
Shutting down ExecutorService
Shutting down ExecutorService
Shutting down ExecutorService
Consumer stopped
Consumer stopped
Consumer stopped
Shutting down ExecutorService 'applicationTaskExecutor'
{dataSource-1} closing ...
{dataSource-1} closed
Starting CommunityApplication on DESKTOP-QPE2857 with PID 20144 (started by 北极光。 in D:\编程\community)
No active profile set, falling back to default profiles: default
Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
Multiple Spring Data modules found, entering strict repository configuration mode!
Bootstrapping Spring Data repositories in DEFAULT mode.
Finished Spring Data repository scanning in 59ms. Found 1 repository interfaces.
Multiple Spring Data modules found, entering strict repository configuration mode!
Bootstrapping Spring Data repositories in DEFAULT mode.
Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.bilibili.mapper.ElasticsearchMapper.
Finished Spring Data repository scanning in 6ms. Found 0 repository interfaces.
Bean 'org.springframework.kafka.annotation.KafkaBootstrapConfiguration' of type [org.springframework.kafka.annotation.KafkaBootstrapConfiguration$$EnhancerBySpringCGLIB$$f684c3b7] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$22d2b234] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Tomcat initialized with port(s): 8989 (http)
Initializing ProtocolHandler ["http-nio-8989"]
Starting service [Tomcat]
Starting Servlet engine: [Apache Tomcat/9.0.19]
Loaded APR based Apache Tomcat Native library [1.2.23] using APR version [1.7.0].
APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].
APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
OpenSSL successfully initialized [OpenSSL 1.1.1c  28 May 2019]
Initializing Spring embedded WebApplicationContext
Root WebApplicationContext: initialization completed in 1558 ms
no modules loaded
loaded plugin [org.elasticsearch.index.reindex.ReindexPlugin]
loaded plugin [org.elasticsearch.join.ParentJoinPlugin]
loaded plugin [org.elasticsearch.percolator.PercolatorPlugin]
loaded plugin [org.elasticsearch.script.mustache.MustachePlugin]
loaded plugin [org.elasticsearch.transport.Netty4Plugin]
Adding transport node : 127.0.0.1:9300
LiveReload server is running on port 35729
Initializing ExecutorService 'applicationTaskExecutor'
Adding welcome page template: index


Using generated security password: 7d126289-8991-4f77-8332-ff21c732c13d

Creating filter chain: Ant [pattern='/resources/**'], []
Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@12fa850e, org.springframework.security.web.context.SecurityContextPersistenceFilter@4222d174, org.springframework.security.web.header.HeaderWriterFilter@26336ff7, org.springframework.security.web.authentication.logout.LogoutFilter@4e2a8370, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@2f260e82, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@7d2ed790, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@617627af, org.springframework.security.web.session.SessionManagementFilter@21496c15, org.springframework.security.web.access.ExceptionTranslationFilter@6e8e7cfd, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@6390c07c]
ConsumerConfig values: 
	auto.commit.interval.ms = 3000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.id = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = true
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = community-consumer-group
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	session.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

Kafka version : 2.0.1
Kafka commitId : fa14705e51bd2ce5
Cluster ID: PlpdobZhSsWqjkg6yvKfBA
ConsumerConfig values: 
	auto.commit.interval.ms = 3000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.id = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = true
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = community-consumer-group
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	session.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

Kafka version : 2.0.1
Kafka commitId : fa14705e51bd2ce5
Initializing ExecutorService
ConsumerConfig values: 
	auto.commit.interval.ms = 3000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.id = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = true
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = community-consumer-group
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	session.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

Kafka version : 2.0.1
Kafka commitId : fa14705e51bd2ce5
Cluster ID: PlpdobZhSsWqjkg6yvKfBA
[Consumer clientId=consumer-2, groupId=community-consumer-group] Discovered group coordinator DESKTOP-QPE2857:9092 (id: 2147483647 rack: null)
Cluster ID: PlpdobZhSsWqjkg6yvKfBA
[Consumer clientId=consumer-2, groupId=community-consumer-group] Revoking previously assigned partitions []
partitions revoked: []
[Consumer clientId=consumer-2, groupId=community-consumer-group] (Re-)joining group
ConsumerConfig values: 
	auto.commit.interval.ms = 3000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.id = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = true
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = community-consumer-group
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	session.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

Kafka version : 2.0.1
Kafka commitId : fa14705e51bd2ce5
Initializing ExecutorService
ConsumerConfig values: 
	auto.commit.interval.ms = 3000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.id = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = true
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = community-consumer-group
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	session.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

Cluster ID: PlpdobZhSsWqjkg6yvKfBA
[Consumer clientId=consumer-4, groupId=community-consumer-group] Discovered group coordinator DESKTOP-QPE2857:9092 (id: 2147483647 rack: null)
Kafka version : 2.0.1
Kafka commitId : fa14705e51bd2ce5
[Consumer clientId=consumer-4, groupId=community-consumer-group] Revoking previously assigned partitions []
partitions revoked: []
[Consumer clientId=consumer-4, groupId=community-consumer-group] (Re-)joining group
[Consumer clientId=consumer-2, groupId=community-consumer-group] Successfully joined group with generation 117
[Consumer clientId=consumer-2, groupId=community-consumer-group] Setting newly assigned partitions [comment-0, like-0, follow-0]
Cluster ID: PlpdobZhSsWqjkg6yvKfBA
ConsumerConfig values: 
	auto.commit.interval.ms = 3000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.id = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = true
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = community-consumer-group
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	session.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

partitions assigned: [comment-0, like-0, follow-0]
Kafka version : 2.0.1
Kafka commitId : fa14705e51bd2ce5
Initializing ExecutorService
Cluster ID: PlpdobZhSsWqjkg6yvKfBA
[Consumer clientId=consumer-6, groupId=community-consumer-group] Discovered group coordinator DESKTOP-QPE2857:9092 (id: 2147483647 rack: null)
[Consumer clientId=consumer-6, groupId=community-consumer-group] Revoking previously assigned partitions []
partitions revoked: []
[Consumer clientId=consumer-6, groupId=community-consumer-group] (Re-)joining group
Starting ProtocolHandler ["http-nio-8989"]
Tomcat started on port(s): 8989 (http) with context path '/community'
Started CommunityApplication in 6.062 seconds (JVM running for 7.19)
[Consumer clientId=consumer-2, groupId=community-consumer-group] Attempt to heartbeat failed since group is rebalancing
[Consumer clientId=consumer-2, groupId=community-consumer-group] Revoking previously assigned partitions [comment-0, like-0, follow-0]
partitions revoked: [comment-0, like-0, follow-0]
[Consumer clientId=consumer-2, groupId=community-consumer-group] (Re-)joining group
[Consumer clientId=consumer-4, groupId=community-consumer-group] Successfully joined group with generation 118
[Consumer clientId=consumer-6, groupId=community-consumer-group] Successfully joined group with generation 118
[Consumer clientId=consumer-2, groupId=community-consumer-group] Successfully joined group with generation 118
[Consumer clientId=consumer-4, groupId=community-consumer-group] Setting newly assigned partitions [delete-0]
[Consumer clientId=consumer-6, groupId=community-consumer-group] Setting newly assigned partitions [publish-0]
[Consumer clientId=consumer-2, groupId=community-consumer-group] Setting newly assigned partitions [comment-0, like-0, follow-0]
partitions assigned: [delete-0]
partitions assigned: [publish-0]
partitions assigned: [comment-0, like-0, follow-0]
Initializing Spring DispatcherServlet 'dispatcherServlet'
Initializing Servlet 'dispatcherServlet'
Completed initialization in 7 ms
用户[0:0:0:0:0:0:0:1],在[2020-11-13 23:05:37],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
Starting without optional epoll library
Starting without optional kqueue library
用户[0:0:0:0:0:0:0:1],在[2020-11-13 23:05:37],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 23:05:37],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 23:05:37],访问了[com.bilibili.service.impl.DataServiceImpl.recordUV].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 23:05:37],访问了[com.bilibili.service.impl.DataServiceImpl.recordDau].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 23:05:37],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.findAllDiscussPost].
{dataSource-1} inited
用户[0:0:0:0:0:0:0:1],在[2020-11-13 23:05:37],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 23:05:37],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 23:05:37],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 23:05:37],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 23:05:37],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 23:05:37],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 23:05:37],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 23:05:37],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 23:05:37],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 23:05:37],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 23:05:37],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 23:05:37],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 23:05:37],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 23:05:37],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 23:05:37],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 23:05:37],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 23:05:37],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 23:05:37],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 23:05:37],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 23:05:37],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 23:05:37],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 23:05:37],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 23:05:37],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 23:05:37],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 23:05:37],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 23:05:37],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 23:05:37],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 23:05:37],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 23:05:37],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 23:05:37],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 23:05:37],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 23:05:37],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 23:05:37],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 23:05:37],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 23:05:37],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 23:05:37],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 23:05:37],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 23:05:37],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 23:05:37],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 23:05:37],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 23:05:37],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 23:05:37],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 23:05:37],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 23:05:37],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 23:05:37],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 23:05:37],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 23:05:37],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 23:06:12],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 23:06:12],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 23:06:12],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 23:06:12],访问了[com.bilibili.service.impl.DataServiceImpl.recordUV].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 23:06:12],访问了[com.bilibili.service.impl.DataServiceImpl.recordDau].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 23:06:12],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 23:06:12],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 23:06:17],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 23:06:17],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 23:06:17],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 23:06:17],访问了[com.bilibili.service.impl.DataServiceImpl.recordUV].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 23:06:17],访问了[com.bilibili.service.impl.DataServiceImpl.recordDau].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 23:06:17],访问了[com.bilibili.service.impl.DataServiceImpl.calculateUV].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 23:06:17],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-13 23:06:17],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
