Starting CommunityApplication on DESKTOP-QPE2857 with PID 12836 (started by 北极光。 in D:\编程\community)
No active profile set, falling back to default profiles: default
Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
Multiple Spring Data modules found, entering strict repository configuration mode!
Bootstrapping Spring Data repositories in DEFAULT mode.
Finished Spring Data repository scanning in 139ms. Found 1 repository interfaces.
Multiple Spring Data modules found, entering strict repository configuration mode!
Bootstrapping Spring Data repositories in DEFAULT mode.
Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.bilibili.mapper.ElasticsearchMapper.
Finished Spring Data repository scanning in 11ms. Found 0 repository interfaces.
Bean 'org.springframework.kafka.annotation.KafkaBootstrapConfiguration' of type [org.springframework.kafka.annotation.KafkaBootstrapConfiguration$$EnhancerBySpringCGLIB$$d2b9e83f] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$ff07d6bc] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Tomcat initialized with port(s): 8989 (http)
Initializing ProtocolHandler ["http-nio-8989"]
Starting service [Tomcat]
Starting Servlet engine: [Apache Tomcat/9.0.19]
Loaded APR based Apache Tomcat Native library [1.2.23] using APR version [1.7.0].
APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].
APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
OpenSSL successfully initialized [OpenSSL 1.1.1c  28 May 2019]
Initializing Spring embedded WebApplicationContext
Root WebApplicationContext: initialization completed in 3333 ms
Starting CommunityApplication on DESKTOP-QPE2857 with PID 3944 (started by 北极光。 in D:\编程\community)
No active profile set, falling back to default profiles: default
Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
Multiple Spring Data modules found, entering strict repository configuration mode!
Bootstrapping Spring Data repositories in DEFAULT mode.
Finished Spring Data repository scanning in 83ms. Found 1 repository interfaces.
Multiple Spring Data modules found, entering strict repository configuration mode!
Bootstrapping Spring Data repositories in DEFAULT mode.
Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.bilibili.mapper.ElasticsearchMapper.
Finished Spring Data repository scanning in 11ms. Found 0 repository interfaces.
Bean 'org.springframework.kafka.annotation.KafkaBootstrapConfiguration' of type [org.springframework.kafka.annotation.KafkaBootstrapConfiguration$$EnhancerBySpringCGLIB$$369c1fbd] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$62ea0e3a] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Tomcat initialized with port(s): 8989 (http)
Initializing ProtocolHandler ["http-nio-8989"]
Starting service [Tomcat]
Starting Servlet engine: [Apache Tomcat/9.0.19]
Loaded APR based Apache Tomcat Native library [1.2.23] using APR version [1.7.0].
APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].
APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
OpenSSL successfully initialized [OpenSSL 1.1.1c  28 May 2019]
Initializing Spring embedded WebApplicationContext
Root WebApplicationContext: initialization completed in 1681 ms
no modules loaded
loaded plugin [org.elasticsearch.index.reindex.ReindexPlugin]
loaded plugin [org.elasticsearch.join.ParentJoinPlugin]
loaded plugin [org.elasticsearch.percolator.PercolatorPlugin]
loaded plugin [org.elasticsearch.script.mustache.MustachePlugin]
loaded plugin [org.elasticsearch.transport.Netty4Plugin]
Adding transport node : 127.0.0.1:9300
LiveReload server is running on port 35729
Initializing ExecutorService 'applicationTaskExecutor'
Adding welcome page template: index
{dataSource-1} inited
Using default implementation for ThreadExecutor
Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
Quartz Scheduler v.2.3.1 created.
Using db table-based data access locking (synchronization).
JobStoreCMT initialized.
Scheduler meta-data: Quartz Scheduler (v2.3.1) 'communityScheduler' with instanceId 'DESKTOP-QPE28571605451046474'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 5 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

Quartz scheduler 'communityScheduler' initialized from an externally provided properties instance.
Quartz scheduler version: 2.3.1
JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@82ecba2


Using generated security password: 777dbc21-1d94-44ac-8664-7444d9c68dec

Creating filter chain: Ant [pattern='/resources/**'], []
Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@5d55bed3, org.springframework.security.web.context.SecurityContextPersistenceFilter@102ea1fb, org.springframework.security.web.header.HeaderWriterFilter@2989aac3, org.springframework.security.web.authentication.logout.LogoutFilter@1c962ac4, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@42dc3c10, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@47469347, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@7967d013, org.springframework.security.web.session.SessionManagementFilter@5e9db379, org.springframework.security.web.access.ExceptionTranslationFilter@5ff35f0c, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@2eaad75b]
ConsumerConfig values: 
	auto.commit.interval.ms = 3000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.id = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = true
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = community-consumer-group
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	session.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

Kafka version : 2.0.1
Kafka commitId : fa14705e51bd2ce5
Cluster ID: PlpdobZhSsWqjkg6yvKfBA
ConsumerConfig values: 
	auto.commit.interval.ms = 3000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.id = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = true
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = community-consumer-group
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	session.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

Kafka version : 2.0.1
Kafka commitId : fa14705e51bd2ce5
Initializing ExecutorService
ConsumerConfig values: 
	auto.commit.interval.ms = 3000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.id = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = true
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = community-consumer-group
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	session.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

Kafka version : 2.0.1
Kafka commitId : fa14705e51bd2ce5
Cluster ID: PlpdobZhSsWqjkg6yvKfBA
[Consumer clientId=consumer-2, groupId=community-consumer-group] Discovered group coordinator DESKTOP-QPE2857:9092 (id: 2147483647 rack: null)
Cluster ID: PlpdobZhSsWqjkg6yvKfBA
[Consumer clientId=consumer-2, groupId=community-consumer-group] Revoking previously assigned partitions []
partitions revoked: []
[Consumer clientId=consumer-2, groupId=community-consumer-group] (Re-)joining group
ConsumerConfig values: 
	auto.commit.interval.ms = 3000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.id = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = true
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = community-consumer-group
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	session.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

Kafka version : 2.0.1
Kafka commitId : fa14705e51bd2ce5
Initializing ExecutorService
ConsumerConfig values: 
	auto.commit.interval.ms = 3000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.id = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = true
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = community-consumer-group
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	session.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

Cluster ID: PlpdobZhSsWqjkg6yvKfBA
[Consumer clientId=consumer-4, groupId=community-consumer-group] Discovered group coordinator DESKTOP-QPE2857:9092 (id: 2147483647 rack: null)
Kafka version : 2.0.1
Kafka commitId : fa14705e51bd2ce5
[Consumer clientId=consumer-4, groupId=community-consumer-group] Revoking previously assigned partitions []
partitions revoked: []
[Consumer clientId=consumer-4, groupId=community-consumer-group] (Re-)joining group
Cluster ID: PlpdobZhSsWqjkg6yvKfBA
ConsumerConfig values: 
	auto.commit.interval.ms = 3000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.id = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = true
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = community-consumer-group
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	session.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

Kafka version : 2.0.1
Kafka commitId : fa14705e51bd2ce5
Initializing ExecutorService
Starting Quartz Scheduler now
Cluster ID: PlpdobZhSsWqjkg6yvKfBA
[Consumer clientId=consumer-6, groupId=community-consumer-group] Discovered group coordinator DESKTOP-QPE2857:9092 (id: 2147483647 rack: null)
[Consumer clientId=consumer-6, groupId=community-consumer-group] Revoking previously assigned partitions []
partitions revoked: []
[Consumer clientId=consumer-6, groupId=community-consumer-group] (Re-)joining group
Scheduler communityScheduler_$_DESKTOP-QPE28571605451046474 started.
Starting ProtocolHandler ["http-nio-8989"]
Tomcat started on port(s): 8989 (http) with context path '/community'
Started CommunityApplication in 7.771 seconds (JVM running for 8.748)
[Consumer clientId=consumer-2, groupId=community-consumer-group] Successfully joined group with generation 120
[Consumer clientId=consumer-2, groupId=community-consumer-group] Setting newly assigned partitions [delete-0]
partitions assigned: [delete-0]
Starting without optional epoll library
Starting without optional kqueue library
[任务取消] 没有需要刷新的帖子!
[Consumer clientId=consumer-6, groupId=community-consumer-group] Group coordinator DESKTOP-QPE2857:9092 (id: 2147483647 rack: null) is unavailable or invalid, will attempt rediscovery
[Consumer clientId=consumer-4, groupId=community-consumer-group] Group coordinator DESKTOP-QPE2857:9092 (id: 2147483647 rack: null) is unavailable or invalid, will attempt rediscovery
[Consumer clientId=consumer-2, groupId=community-consumer-group] Error sending fetch request (sessionId=1743372774, epoch=4) to node 0: org.apache.kafka.common.errors.DisconnectException.
[Consumer clientId=consumer-2, groupId=community-consumer-group] Group coordinator DESKTOP-QPE2857:9092 (id: 2147483647 rack: null) is unavailable or invalid, will attempt rediscovery
[Consumer clientId=consumer-4, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-2, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-6, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-4, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-6, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-2, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-4, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-6, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-2, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-4, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-6, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-2, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-6, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-4, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-2, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-6, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-4, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-2, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-6, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-4, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-2, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-6, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-4, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-2, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-4, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-6, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-2, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-6, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-4, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-2, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-6, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-4, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-2, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-6, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-4, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-2, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-4, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-6, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-2, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-4, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-6, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-2, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-4, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-6, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-2, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-4, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-6, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-2, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-4, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-6, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-2, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-4, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-6, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-2, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-4, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-6, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-2, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-4, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-6, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-2, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
Initializing Spring DispatcherServlet 'dispatcherServlet'
Initializing Servlet 'dispatcherServlet'
Completed initialization in 19 ms
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:27],访问了[com.bilibili.service.impl.DataServiceImpl.recordUV].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:27],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.findAllDiscussPost].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:28],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:28],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:28],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:28],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:28],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:28],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:28],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:28],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:28],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:28],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:28],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:28],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:28],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:28],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:28],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:28],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:28],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:28],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:28],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:28],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:28],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:28],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:28],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:28],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:28],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:28],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:28],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:28],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:28],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:28],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
[Consumer clientId=consumer-4, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-6, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-2, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:30],访问了[com.bilibili.service.impl.DataServiceImpl.recordUV].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:30],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.findAllDiscussPost].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:30],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:30],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:30],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:30],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:30],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:30],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:30],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:30],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:30],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:30],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:30],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:30],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:30],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:30],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:30],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:30],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:30],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:30],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:30],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:30],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:30],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:30],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:30],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:30],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:30],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:30],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:30],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:30],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:30],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:30],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
[Consumer clientId=consumer-4, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-6, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:33],访问了[com.bilibili.service.impl.DataServiceImpl.recordUV].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:33],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.findAllDiscussPost].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:33],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:33],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:33],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:33],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
[Consumer clientId=consumer-2, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:33],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:33],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:33],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:33],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:33],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:33],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:33],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:33],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:33],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:33],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:33],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:33],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:33],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:33],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:33],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:33],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:33],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:33],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:33],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:33],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:33],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:33],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:33],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:33],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:33],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:33],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
[Consumer clientId=consumer-4, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:35],访问了[com.bilibili.service.impl.DataServiceImpl.recordUV].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:35],访问了[com.bilibili.service.impl.DataServiceImpl.recordUV].
[Consumer clientId=consumer-6, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-2, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-4, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-6, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-2, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-4, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-6, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-2, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-4, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-6, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-2, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-4, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-6, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-2, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-4, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-6, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-2, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-6, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-4, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-2, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-6, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-4, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:57],访问了[com.bilibili.service.impl.DataServiceImpl.recordUV].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:57],访问了[com.bilibili.service.impl.UserServiceImpl.login].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:38:57],访问了[com.bilibili.service.impl.DataServiceImpl.recordUV].
[Consumer clientId=consumer-2, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-6, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-4, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-2, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-4, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-6, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-2, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-4, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-6, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-2, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-4, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-6, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:09],访问了[com.bilibili.service.impl.DataServiceImpl.recordUV].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:09],访问了[com.bilibili.service.impl.UserServiceImpl.login].
[Consumer clientId=consumer-2, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:09],访问了[com.bilibili.service.impl.DataServiceImpl.recordUV].
[Consumer clientId=consumer-4, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-6, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-2, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-4, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-6, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-2, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-4, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-6, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-2, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:18],访问了[com.bilibili.service.impl.DataServiceImpl.recordUV].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:18],访问了[com.bilibili.service.impl.UserServiceImpl.login].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:18],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:18],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:18],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:18],访问了[com.bilibili.service.impl.DataServiceImpl.recordUV].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:18],访问了[com.bilibili.service.impl.DataServiceImpl.recordDau].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:18],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.findAllDiscussPost].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:18],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:18],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:18],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:18],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:18],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:18],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:18],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:18],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:18],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:18],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:18],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:18],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:18],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:18],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:18],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:18],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:18],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:18],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:18],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:18],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:18],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:18],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:18],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:18],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:18],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:18],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:18],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:18],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:18],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:18],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:18],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:18],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:18],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:18],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:18],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:18],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:18],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:18],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:18],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:18],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:18],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:18],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:18],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:18],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:18],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:18],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:18],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
[Consumer clientId=consumer-4, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-6, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-2, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-4, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-6, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-2, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:25],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:25],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:25],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:25],访问了[com.bilibili.service.impl.DataServiceImpl.recordUV].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:25],访问了[com.bilibili.service.impl.DataServiceImpl.recordDau].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:25],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.getDiscussPostById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:25],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:25],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:25],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:25],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:25],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:25],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
[Consumer clientId=consumer-4, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-6, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-2, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-4, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-6, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-2, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-4, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-6, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-2, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-4, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-6, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-2, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:38],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:38],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:38],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:38],访问了[com.bilibili.service.impl.DataServiceImpl.recordUV].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:38],访问了[com.bilibili.service.impl.DataServiceImpl.recordDau].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:38],访问了[com.bilibili.service.impl.LickServiceImpl.link].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:38],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:38],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
[Consumer clientId=consumer-4, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
ProducerConfig values: 
	acks = 1
	batch.size = 16384
	bootstrap.servers = [localhost:9092]
	buffer.memory = 33554432
	client.id = 
	compression.type = none
	connections.max.idle.ms = 540000
	enable.idempotence = false
	interceptor.classes = []
	key.serializer = class org.apache.kafka.common.serialization.StringSerializer
	linger.ms = 0
	max.block.ms = 60000
	max.in.flight.requests.per.connection = 5
	max.request.size = 1048576
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partitioner.class = class org.apache.kafka.clients.producer.internals.DefaultPartitioner
	receive.buffer.bytes = 32768
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 0
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	transaction.timeout.ms = 60000
	transactional.id = null
	value.serializer = class org.apache.kafka.common.serialization.StringSerializer

Kafka version : 2.0.1
Kafka commitId : fa14705e51bd2ce5
[Consumer clientId=consumer-6, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-2, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Producer clientId=producer-1] Connection to node -1 could not be established. Broker may not be available.
[Consumer clientId=consumer-4, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:42],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:42],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:42],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:42],访问了[com.bilibili.service.impl.DataServiceImpl.recordUV].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:42],访问了[com.bilibili.service.impl.DataServiceImpl.recordDau].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:42],访问了[com.bilibili.service.impl.LickServiceImpl.link].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:42],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:42],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
[Consumer clientId=consumer-2, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-6, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Producer clientId=producer-1] Connection to node -1 could not be established. Broker may not be available.
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:43],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:43],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:43],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:43],访问了[com.bilibili.service.impl.DataServiceImpl.recordUV].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:43],访问了[com.bilibili.service.impl.DataServiceImpl.recordDau].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:43],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.getDiscussPostById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:43],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:43],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:43],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:43],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:43],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:43],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
[Producer clientId=producer-1] Connection to node -1 could not be established. Broker may not be available.
[Consumer clientId=consumer-4, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-2, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-6, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:46],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:46],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:46],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:46],访问了[com.bilibili.service.impl.DataServiceImpl.recordUV].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:46],访问了[com.bilibili.service.impl.DataServiceImpl.recordDau].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:46],访问了[com.bilibili.service.impl.LickServiceImpl.link].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:46],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:46],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
[Producer clientId=producer-1] Connection to node -1 could not be established. Broker may not be available.
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:47],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:47],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:47],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:47],访问了[com.bilibili.service.impl.DataServiceImpl.recordUV].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:47],访问了[com.bilibili.service.impl.DataServiceImpl.recordDau].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:47],访问了[com.bilibili.service.impl.LickServiceImpl.link].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:47],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:47],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:47],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:47],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:47],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:47],访问了[com.bilibili.service.impl.DataServiceImpl.recordUV].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:47],访问了[com.bilibili.service.impl.DataServiceImpl.recordDau].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:47],访问了[com.bilibili.service.impl.LickServiceImpl.link].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:47],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:47],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:47],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:47],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:47],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:47],访问了[com.bilibili.service.impl.DataServiceImpl.recordUV].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:47],访问了[com.bilibili.service.impl.DataServiceImpl.recordDau].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:47],访问了[com.bilibili.service.impl.LickServiceImpl.link].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:47],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:47],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:47],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:47],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:47],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:47],访问了[com.bilibili.service.impl.DataServiceImpl.recordUV].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:47],访问了[com.bilibili.service.impl.DataServiceImpl.recordDau].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:47],访问了[com.bilibili.service.impl.LickServiceImpl.link].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:47],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:47],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
[Consumer clientId=consumer-4, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:48],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:48],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:48],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:48],访问了[com.bilibili.service.impl.DataServiceImpl.recordUV].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:48],访问了[com.bilibili.service.impl.DataServiceImpl.recordDau].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:48],访问了[com.bilibili.service.impl.LickServiceImpl.link].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:48],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:48],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:48],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:48],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:48],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:48],访问了[com.bilibili.service.impl.DataServiceImpl.recordUV].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:48],访问了[com.bilibili.service.impl.DataServiceImpl.recordDau].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:48],访问了[com.bilibili.service.impl.LickServiceImpl.link].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:48],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:48],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:48],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:48],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:48],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:48],访问了[com.bilibili.service.impl.DataServiceImpl.recordUV].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:48],访问了[com.bilibili.service.impl.DataServiceImpl.recordDau].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:48],访问了[com.bilibili.service.impl.LickServiceImpl.link].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:48],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:48],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:48],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:48],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:48],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:48],访问了[com.bilibili.service.impl.DataServiceImpl.recordUV].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:48],访问了[com.bilibili.service.impl.DataServiceImpl.recordDau].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:48],访问了[com.bilibili.service.impl.LickServiceImpl.link].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:48],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:48],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
[Consumer clientId=consumer-2, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-6, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:48],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:48],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:48],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:48],访问了[com.bilibili.service.impl.DataServiceImpl.recordUV].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:48],访问了[com.bilibili.service.impl.DataServiceImpl.recordDau].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:48],访问了[com.bilibili.service.impl.LickServiceImpl.link].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:48],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:48],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:49],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:49],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:49],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:49],访问了[com.bilibili.service.impl.DataServiceImpl.recordUV].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:49],访问了[com.bilibili.service.impl.DataServiceImpl.recordDau].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:49],访问了[com.bilibili.service.impl.LickServiceImpl.link].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:49],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:49],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
[Producer clientId=producer-1] Connection to node -1 could not be established. Broker may not be available.
[Consumer clientId=consumer-4, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-6, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-2, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Producer clientId=producer-1] Connection to node -1 could not be established. Broker may not be available.
[Consumer clientId=consumer-4, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-6, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-2, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Producer clientId=producer-1] Connection to node -1 could not be established. Broker may not be available.
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:56],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:56],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:56],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:56],访问了[com.bilibili.service.impl.DataServiceImpl.recordUV].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:56],访问了[com.bilibili.service.impl.DataServiceImpl.recordDau].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:56],访问了[com.bilibili.service.impl.LickServiceImpl.link].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:56],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:39:56],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
[Consumer clientId=consumer-4, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-2, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-6, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Producer clientId=producer-1] Connection to node -1 could not be established. Broker may not be available.
[Consumer clientId=consumer-4, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-2, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-6, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Producer clientId=producer-1] Connection to node -1 could not be established. Broker may not be available.
[Consumer clientId=consumer-4, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-2, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:03],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:03],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:03],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:03],访问了[com.bilibili.service.impl.DataServiceImpl.recordUV].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:03],访问了[com.bilibili.service.impl.DataServiceImpl.recordDau].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:03],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.findAllDiscussPost].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:03],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:03],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:03],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:03],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:03],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:03],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:03],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:03],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:03],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:03],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:03],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:03],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:03],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:03],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:03],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:03],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:03],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:03],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:03],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:03],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:03],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:03],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:03],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:03],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:03],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:03],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:03],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:03],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:03],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:03],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:03],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:03],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:03],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:03],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:03],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:03],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:03],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:03],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:03],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:03],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:03],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:03],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:03],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:03],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:03],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:03],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:03],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
[Consumer clientId=consumer-6, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:04],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:04],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:04],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:04],访问了[com.bilibili.service.impl.DataServiceImpl.recordUV].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:04],访问了[com.bilibili.service.impl.DataServiceImpl.recordDau].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:04],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.findAllDiscussPost].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:04],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:04],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:04],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:04],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:04],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:04],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:04],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:04],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:04],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:04],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:04],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:04],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:04],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:04],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:04],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:04],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:04],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:04],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:04],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:04],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:04],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:04],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:04],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:04],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:04],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:04],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:04],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:04],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:04],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:04],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:04],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:04],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:04],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:04],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:04],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:04],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:04],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:04],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:04],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:04],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:04],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:04],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:04],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:04],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:04],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:04],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:04],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
[Producer clientId=producer-1] Connection to node -1 could not be established. Broker may not be available.
[Consumer clientId=consumer-4, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-2, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-6, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Producer clientId=producer-1] Connection to node -1 could not be established. Broker may not be available.
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:07],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:07],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:07],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:07],访问了[com.bilibili.service.impl.DataServiceImpl.recordUV].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:07],访问了[com.bilibili.service.impl.DataServiceImpl.recordDau].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:07],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.getDiscussPostById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:07],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:07],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:07],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:07],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:07],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:07],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
[Consumer clientId=consumer-2, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:09],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:09],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:09],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:09],访问了[com.bilibili.service.impl.DataServiceImpl.recordUV].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:09],访问了[com.bilibili.service.impl.DataServiceImpl.recordDau].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:09],访问了[com.bilibili.service.impl.LickServiceImpl.link].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:09],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:09],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
[Consumer clientId=consumer-4, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-6, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Producer clientId=producer-1] Connection to node -1 could not be established. Broker may not be available.
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:10],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:10],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:10],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:10],访问了[com.bilibili.service.impl.DataServiceImpl.recordUV].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:10],访问了[com.bilibili.service.impl.DataServiceImpl.recordDau].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:10],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.getDiscussPostById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:10],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:10],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:10],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:10],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:10],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:10],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
[Consumer clientId=consumer-2, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-4, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-6, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Producer clientId=producer-1] Connection to node -1 could not be established. Broker may not be available.
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:13],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:13],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:13],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:13],访问了[com.bilibili.service.impl.DataServiceImpl.recordUV].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:13],访问了[com.bilibili.service.impl.DataServiceImpl.recordDau].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:13],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.findAllDiscussPost].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:13],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:13],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:13],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:13],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:13],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:13],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:13],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:13],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:13],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:13],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:13],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:13],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:13],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:13],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:13],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:13],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:13],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:13],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:13],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:13],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:13],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:13],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:13],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:13],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:13],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:13],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:13],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:13],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:13],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:13],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:13],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:13],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:13],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:13],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:13],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:13],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:13],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:13],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:13],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:13],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:13],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:13],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:13],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:13],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:13],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:13],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:13],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
[Consumer clientId=consumer-4, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-2, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-6, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Producer clientId=producer-1] Connection to node -1 could not be established. Broker may not be available.
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:16],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:16],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:16],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:16],访问了[com.bilibili.service.impl.DataServiceImpl.recordUV].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:16],访问了[com.bilibili.service.impl.DataServiceImpl.recordDau].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:16],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.getDiscussPostById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:16],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:16],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:16],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:16],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:16],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:16],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
[Consumer clientId=consumer-4, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-2, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-6, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Producer clientId=producer-1] Connection to node -1 could not be established. Broker may not be available.
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:21],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:21],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:21],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:21],访问了[com.bilibili.service.impl.DataServiceImpl.recordUV].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:21],访问了[com.bilibili.service.impl.DataServiceImpl.recordDau].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:21],访问了[com.bilibili.service.impl.CommentServiceImpl.addComment].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:21],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.updateDiscussionComment].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:40:21],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.getDiscussPostById].
[Consumer clientId=consumer-4, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-2, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-6, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Producer clientId=producer-1] Connection to node -1 could not be established. Broker may not be available.
[Consumer clientId=consumer-4, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-2, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-6, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Producer clientId=producer-1] Connection to node -1 could not be established. Broker may not be available.
[Consumer clientId=consumer-4, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-2, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-6, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Producer clientId=producer-1] Connection to node -1 could not be established. Broker may not be available.
[Consumer clientId=consumer-6, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-4, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-2, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Producer clientId=producer-1] Connection to node -1 could not be established. Broker may not be available.
[Consumer clientId=consumer-2, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-6, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-4, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Producer clientId=producer-1] Connection to node -1 could not be established. Broker may not be available.
[Consumer clientId=consumer-2, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-4, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-6, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Producer clientId=producer-1] Connection to node -1 could not be established. Broker may not be available.
Exception thrown when sending a message with key='null' and payload='{"data":{"postId":285},"entityId":285,"entityType":1,"entityUserId":160,"topic":"like","userId":161}' to topic like:
org.apache.kafka.common.errors.TimeoutException: Failed to update metadata after 60000 ms.
[Consumer clientId=consumer-2, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-4, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-6, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Producer clientId=producer-1] Connection to node -1 could not be established. Broker may not be available.
[Consumer clientId=consumer-2, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-4, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
[Consumer clientId=consumer-6, groupId=community-consumer-group] Connection to node 0 could not be established. Broker may not be available.
Starting CommunityApplication on DESKTOP-QPE2857 with PID 5728 (started by 北极光。 in D:\编程\community)
No active profile set, falling back to default profiles: default
Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
Multiple Spring Data modules found, entering strict repository configuration mode!
Bootstrapping Spring Data repositories in DEFAULT mode.
Finished Spring Data repository scanning in 60ms. Found 1 repository interfaces.
Multiple Spring Data modules found, entering strict repository configuration mode!
Bootstrapping Spring Data repositories in DEFAULT mode.
Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.bilibili.mapper.ElasticsearchMapper.
Finished Spring Data repository scanning in 7ms. Found 0 repository interfaces.
Bean 'org.springframework.kafka.annotation.KafkaBootstrapConfiguration' of type [org.springframework.kafka.annotation.KafkaBootstrapConfiguration$$EnhancerBySpringCGLIB$$89809f7e] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$b5ce8dfb] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Tomcat initialized with port(s): 8989 (http)
Initializing ProtocolHandler ["http-nio-8989"]
Starting service [Tomcat]
Starting Servlet engine: [Apache Tomcat/9.0.19]
Loaded APR based Apache Tomcat Native library [1.2.23] using APR version [1.7.0].
APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].
APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
OpenSSL successfully initialized [OpenSSL 1.1.1c  28 May 2019]
Initializing Spring embedded WebApplicationContext
Root WebApplicationContext: initialization completed in 1692 ms
no modules loaded
loaded plugin [org.elasticsearch.index.reindex.ReindexPlugin]
loaded plugin [org.elasticsearch.join.ParentJoinPlugin]
loaded plugin [org.elasticsearch.percolator.PercolatorPlugin]
loaded plugin [org.elasticsearch.script.mustache.MustachePlugin]
loaded plugin [org.elasticsearch.transport.Netty4Plugin]
Adding transport node : 127.0.0.1:9300
LiveReload server is running on port 35729
Initializing ExecutorService 'applicationTaskExecutor'
Adding welcome page template: index
{dataSource-1} inited
Using default implementation for ThreadExecutor
Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
Quartz Scheduler v.2.3.1 created.
Using db table-based data access locking (synchronization).
JobStoreCMT initialized.
Scheduler meta-data: Quartz Scheduler (v2.3.1) 'communityScheduler' with instanceId 'DESKTOP-QPE28571605451594518'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 5 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

Quartz scheduler 'communityScheduler' initialized from an externally provided properties instance.
Quartz scheduler version: 2.3.1
JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@32bad6c7


Using generated security password: 6d9a6613-d7aa-4ac2-9396-738d5def031f

Creating filter chain: Ant [pattern='/resources/**'], []
Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@7dde8f74, org.springframework.security.web.context.SecurityContextPersistenceFilter@2b870846, org.springframework.security.web.header.HeaderWriterFilter@2cfc79cf, org.springframework.security.web.authentication.logout.LogoutFilter@7e9dc8ad, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@30ea2473, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@69947762, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@175cd370, org.springframework.security.web.session.SessionManagementFilter@6ecd74c9, org.springframework.security.web.access.ExceptionTranslationFilter@4e7dc28b, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@4863d657]
ConsumerConfig values: 
	auto.commit.interval.ms = 3000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.id = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = true
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = community-consumer-group
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	session.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

Kafka version : 2.0.1
Kafka commitId : fa14705e51bd2ce5
Cluster ID: QO7D4advRRq2h8kiil_eJw
ConsumerConfig values: 
	auto.commit.interval.ms = 3000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.id = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = true
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = community-consumer-group
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	session.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

Kafka version : 2.0.1
Kafka commitId : fa14705e51bd2ce5
Initializing ExecutorService
ConsumerConfig values: 
	auto.commit.interval.ms = 3000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.id = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = true
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = community-consumer-group
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	session.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

Kafka version : 2.0.1
Kafka commitId : fa14705e51bd2ce5
Cluster ID: QO7D4advRRq2h8kiil_eJw
Cluster ID: QO7D4advRRq2h8kiil_eJw
ConsumerConfig values: 
	auto.commit.interval.ms = 3000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.id = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = true
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = community-consumer-group
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	session.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

Kafka version : 2.0.1
Kafka commitId : fa14705e51bd2ce5
Initializing ExecutorService
ConsumerConfig values: 
	auto.commit.interval.ms = 3000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.id = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = true
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = community-consumer-group
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	session.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

Kafka version : 2.0.1
Kafka commitId : fa14705e51bd2ce5
Cluster ID: QO7D4advRRq2h8kiil_eJw
Cluster ID: QO7D4advRRq2h8kiil_eJw
[Consumer clientId=consumer-2, groupId=community-consumer-group] Discovered group coordinator DESKTOP-QPE2857:9092 (id: 2147483647 rack: null)
[Consumer clientId=consumer-4, groupId=community-consumer-group] Discovered group coordinator DESKTOP-QPE2857:9092 (id: 2147483647 rack: null)
[Consumer clientId=consumer-4, groupId=community-consumer-group] Revoking previously assigned partitions []
[Consumer clientId=consumer-2, groupId=community-consumer-group] Revoking previously assigned partitions []
partitions revoked: []
partitions revoked: []
[Consumer clientId=consumer-4, groupId=community-consumer-group] (Re-)joining group
[Consumer clientId=consumer-2, groupId=community-consumer-group] (Re-)joining group
[Consumer clientId=consumer-4, groupId=community-consumer-group] Successfully joined group with generation 1
[Consumer clientId=consumer-2, groupId=community-consumer-group] Successfully joined group with generation 1
[Consumer clientId=consumer-2, groupId=community-consumer-group] Setting newly assigned partitions [comment-0, like-0, follow-0]
[Consumer clientId=consumer-4, groupId=community-consumer-group] Setting newly assigned partitions [delete-0]
ConsumerConfig values: 
	auto.commit.interval.ms = 3000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.id = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = true
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = community-consumer-group
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	session.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

Kafka version : 2.0.1
Kafka commitId : fa14705e51bd2ce5
Initializing ExecutorService
Starting Quartz Scheduler now
Cluster ID: QO7D4advRRq2h8kiil_eJw
[Consumer clientId=consumer-6, groupId=community-consumer-group] Discovered group coordinator DESKTOP-QPE2857:9092 (id: 2147483647 rack: null)
[Consumer clientId=consumer-6, groupId=community-consumer-group] Revoking previously assigned partitions []
partitions revoked: []
[Consumer clientId=consumer-6, groupId=community-consumer-group] (Re-)joining group
ClusterManager: detected 1 failed or restarted instances.
ClusterManager: Scanning for instance "DESKTOP-QPE28571605451046474"'s failed in-progress jobs.
[Consumer clientId=consumer-2, groupId=community-consumer-group] Resetting offset for partition comment-0 to offset 0.
[Consumer clientId=consumer-2, groupId=community-consumer-group] Resetting offset for partition like-0 to offset 0.
[Consumer clientId=consumer-4, groupId=community-consumer-group] Resetting offset for partition delete-0 to offset 0.
[Consumer clientId=consumer-2, groupId=community-consumer-group] Resetting offset for partition follow-0 to offset 0.
partitions assigned: [delete-0]
partitions assigned: [comment-0, like-0, follow-0]
Scheduler communityScheduler_$_DESKTOP-QPE28571605451594518 started.
Handling 1 trigger(s) that missed their scheduled fire-time.
Starting ProtocolHandler ["http-nio-8989"]
Tomcat started on port(s): 8989 (http) with context path '/community'
Started CommunityApplication in 13.581 seconds (JVM running for 14.595)
[Consumer clientId=consumer-4, groupId=community-consumer-group] Attempt to heartbeat failed since group is rebalancing
[Consumer clientId=consumer-2, groupId=community-consumer-group] Attempt to heartbeat failed since group is rebalancing
[Consumer clientId=consumer-4, groupId=community-consumer-group] Revoking previously assigned partitions [delete-0]
partitions revoked: [delete-0]
[Consumer clientId=consumer-4, groupId=community-consumer-group] (Re-)joining group
[Consumer clientId=consumer-2, groupId=community-consumer-group] Revoking previously assigned partitions [comment-0, like-0, follow-0]
partitions revoked: [comment-0, like-0, follow-0]
[Consumer clientId=consumer-2, groupId=community-consumer-group] (Re-)joining group
[Consumer clientId=consumer-4, groupId=community-consumer-group] Successfully joined group with generation 2
[Consumer clientId=consumer-4, groupId=community-consumer-group] Setting newly assigned partitions [delete-0]
[Consumer clientId=consumer-2, groupId=community-consumer-group] Successfully joined group with generation 2
[Consumer clientId=consumer-2, groupId=community-consumer-group] Setting newly assigned partitions [comment-0, like-0, follow-0]
[Consumer clientId=consumer-6, groupId=community-consumer-group] Successfully joined group with generation 2
[Consumer clientId=consumer-6, groupId=community-consumer-group] Setting newly assigned partitions [publish-0]
partitions assigned: [delete-0]
partitions assigned: [comment-0, like-0, follow-0]
[Consumer clientId=consumer-6, groupId=community-consumer-group] Resetting offset for partition publish-0 to offset 0.
partitions assigned: [publish-0]
Initializing Spring DispatcherServlet 'dispatcherServlet'
Initializing Servlet 'dispatcherServlet'
Completed initialization in 11 ms
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:46:59],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
Starting without optional epoll library
Starting without optional kqueue library
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:46:59],访问了[com.bilibili.service.impl.DataServiceImpl.recordUV].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:46:59],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.findAllDiscussPost].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:46:59],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:46:59],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:46:59],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:46:59],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:46:59],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:46:59],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:46:59],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:46:59],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:46:59],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:46:59],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:46:59],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:46:59],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:46:59],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:46:59],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:46:59],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:46:59],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:46:59],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:46:59],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:46:59],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:46:59],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:46:59],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:46:59],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:46:59],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:46:59],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:46:59],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:46:59],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:46:59],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:46:59],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:46:59],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:46:59],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:02],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:02],访问了[com.bilibili.service.impl.DataServiceImpl.recordUV].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:02],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:02],访问了[com.bilibili.service.impl.DataServiceImpl.recordUV].
[任务取消] 没有需要刷新的帖子!
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:29],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:29],访问了[com.bilibili.service.impl.DataServiceImpl.recordUV].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:34],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:34],访问了[com.bilibili.service.impl.DataServiceImpl.recordUV].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:34],访问了[com.bilibili.service.impl.UserServiceImpl.login].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:34],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:34],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:34],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:34],访问了[com.bilibili.service.impl.DataServiceImpl.recordUV].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:34],访问了[com.bilibili.service.impl.DataServiceImpl.recordDau].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:34],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.findAllDiscussPost].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:34],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:34],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:34],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:34],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:34],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:34],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:34],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:34],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:34],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:34],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:34],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:34],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:34],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:34],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:34],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:34],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:34],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:34],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:34],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:34],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:34],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:34],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:34],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:34],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:34],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:34],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:34],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:34],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:34],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:34],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:34],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:34],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:34],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:34],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:34],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:34],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:34],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:34],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:34],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:34],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:34],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:34],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:34],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:34],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:34],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:34],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:34],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:37],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:37],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:37],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:37],访问了[com.bilibili.service.impl.DataServiceImpl.recordUV].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:37],访问了[com.bilibili.service.impl.DataServiceImpl.recordDau].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:37],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.getDiscussPostById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:37],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:37],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:37],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:37],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:37],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:37],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:37],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:37],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:37],访问了[com.bilibili.service.impl.CommentServiceImpl.CommentCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:37],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:37],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:39],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:39],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:39],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:39],访问了[com.bilibili.service.impl.DataServiceImpl.recordUV].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:39],访问了[com.bilibili.service.impl.DataServiceImpl.recordDau].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:39],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.findAllDiscussPost].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:39],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:39],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:39],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:39],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:39],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:39],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:39],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:39],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:39],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:39],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:39],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:39],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:39],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:39],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:39],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:39],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:39],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:39],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:39],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:39],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:39],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:39],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:39],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:39],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:39],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:39],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:39],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:39],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:39],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:39],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:39],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:39],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:39],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:39],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:39],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:39],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:39],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:39],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:39],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:39],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:39],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:39],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:39],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:39],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:39],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:39],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:39],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:42],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:42],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:42],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:42],访问了[com.bilibili.service.impl.DataServiceImpl.recordUV].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:42],访问了[com.bilibili.service.impl.DataServiceImpl.recordDau].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:42],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.getDiscussPostById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:42],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:42],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:42],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:42],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:42],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:42],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:42],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:42],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:42],访问了[com.bilibili.service.impl.CommentServiceImpl.CommentCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:42],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:42],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:44],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:44],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:44],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:44],访问了[com.bilibili.service.impl.DataServiceImpl.recordUV].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:44],访问了[com.bilibili.service.impl.DataServiceImpl.recordDau].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:44],访问了[com.bilibili.service.impl.LickServiceImpl.link].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:44],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:44],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
ProducerConfig values: 
	acks = 1
	batch.size = 16384
	bootstrap.servers = [localhost:9092]
	buffer.memory = 33554432
	client.id = 
	compression.type = none
	connections.max.idle.ms = 540000
	enable.idempotence = false
	interceptor.classes = []
	key.serializer = class org.apache.kafka.common.serialization.StringSerializer
	linger.ms = 0
	max.block.ms = 60000
	max.in.flight.requests.per.connection = 5
	max.request.size = 1048576
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partitioner.class = class org.apache.kafka.clients.producer.internals.DefaultPartitioner
	receive.buffer.bytes = 32768
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 0
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	transaction.timeout.ms = 60000
	transactional.id = null
	value.serializer = class org.apache.kafka.common.serialization.StringSerializer

Kafka version : 2.0.1
Kafka commitId : fa14705e51bd2ce5
Cluster ID: QO7D4advRRq2h8kiil_eJw
普通service方法
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:55],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:55],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:55],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:55],访问了[com.bilibili.service.impl.DataServiceImpl.recordUV].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:55],访问了[com.bilibili.service.impl.DataServiceImpl.recordDau].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:55],访问了[com.bilibili.service.impl.CommentServiceImpl.addComment].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:55],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.updateDiscussionComment].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:55],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.getDiscussPostById].
普通service方法
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:55],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
普通service方法
普通service方法
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:55],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:55],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:55],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:55],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:55],访问了[com.bilibili.service.impl.DataServiceImpl.recordUV].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:55],访问了[com.bilibili.service.impl.DataServiceImpl.recordDau].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:55],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.getDiscussPostById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:55],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:55],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:55],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:55],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:55],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:55],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:55],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:55],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:55],访问了[com.bilibili.service.impl.CommentServiceImpl.CommentCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:55],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:55],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:55],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:55],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:55],访问了[com.bilibili.service.impl.CommentServiceImpl.CommentCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:55],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:55],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:57],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:57],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:57],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:57],访问了[com.bilibili.service.impl.DataServiceImpl.recordUV].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:57],访问了[com.bilibili.service.impl.DataServiceImpl.recordDau].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:57],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.findAllDiscussPost].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:57],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:57],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:57],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:57],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:57],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:57],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:57],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:57],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:57],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:57],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:57],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:57],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:57],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:57],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:57],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:57],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:57],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:57],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:57],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:57],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:57],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:57],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:57],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:57],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:57],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:57],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:57],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:57],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:57],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:57],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:57],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:57],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:57],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:57],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:57],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:57],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:57],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:57],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:57],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:57],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:57],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:57],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:57],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:57],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:57],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:57],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:47:57],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:23],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:23],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:23],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:23],访问了[com.bilibili.service.impl.DataServiceImpl.recordUV].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:23],访问了[com.bilibili.service.impl.DataServiceImpl.recordDau].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:23],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.getDiscussPostById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:23],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:23],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:23],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:23],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:23],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:23],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:23],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:23],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:23],访问了[com.bilibili.service.impl.CommentServiceImpl.CommentCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:23],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:23],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:23],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:23],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:23],访问了[com.bilibili.service.impl.CommentServiceImpl.CommentCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:23],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:23],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:25],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:25],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:25],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:25],访问了[com.bilibili.service.impl.DataServiceImpl.recordUV].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:25],访问了[com.bilibili.service.impl.DataServiceImpl.recordDau].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:25],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.updateStatus].
普通service方法
普通service方法
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:26],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:26],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:26],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:26],访问了[com.bilibili.service.impl.DataServiceImpl.recordUV].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:26],访问了[com.bilibili.service.impl.DataServiceImpl.recordDau].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:26],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.findAllDiscussPost].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:26],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:26],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:26],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:26],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:26],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:26],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:26],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:26],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:26],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:26],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:26],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:26],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:26],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:26],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:26],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:26],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:26],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:26],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:26],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:26],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:26],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:26],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:26],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:26],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:26],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:26],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:26],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:26],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:26],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:26],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:26],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:26],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:26],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:26],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:26],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:26],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:26],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:26],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:26],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:26],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:26],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:26],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:26],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:26],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:26],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:26],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:26],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:28],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:28],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:28],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:28],访问了[com.bilibili.service.impl.DataServiceImpl.recordUV].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:28],访问了[com.bilibili.service.impl.DataServiceImpl.recordDau].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:28],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.findAllDiscussPost].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:28],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:28],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:28],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:28],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:28],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:28],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:28],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:28],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:28],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:28],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:28],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:28],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:28],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:28],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:28],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:28],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:28],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:28],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:28],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:28],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:28],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:28],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:28],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:28],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:28],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:28],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:28],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:28],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:28],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:28],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:28],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:28],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:28],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:28],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:28],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:28],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:28],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:28],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:28],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:28],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:28],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:28],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:28],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:28],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:28],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:28],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:28],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:35],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:35],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:35],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:35],访问了[com.bilibili.service.impl.DataServiceImpl.recordUV].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:35],访问了[com.bilibili.service.impl.DataServiceImpl.recordDau].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:35],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.findAllDiscussPost].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:35],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:35],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:35],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:35],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:35],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:35],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:35],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:35],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:35],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:35],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:35],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:35],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:35],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:35],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:35],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:35],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:35],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:35],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:35],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:35],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:35],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:35],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:35],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:35],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:35],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:35],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:35],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:35],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:35],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:35],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:35],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:35],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:35],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:35],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:35],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:35],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:35],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:35],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:35],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:35],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:35],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:35],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:35],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:35],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:35],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:35],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 22:48:35],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
[任务开始] 正在刷新帖子分数: 2
普通service方法
普通service方法
普通service方法
普通service方法
Job communityJobGroup.postScoreRefreshJob threw an unhandled Exception: 
java.lang.ClassCastException: java.lang.String cannot be cast to java.lang.Integer
	at com.bilibili.quartz.PostScoreRefreshJob.execute(PostScoreRefreshJob.java:54)
	at org.quartz.core.JobRunShell.run(JobRunShell.java:202)
	at org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:573)
Job (communityJobGroup.postScoreRefreshJob threw an exception.
org.quartz.SchedulerException: Job threw an unhandled exception.
	at org.quartz.core.JobRunShell.run(JobRunShell.java:213)
	at org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:573)
Caused by: java.lang.ClassCastException: java.lang.String cannot be cast to java.lang.Integer
	at com.bilibili.quartz.PostScoreRefreshJob.execute(PostScoreRefreshJob.java:54)
	at org.quartz.core.JobRunShell.run(JobRunShell.java:202)
	... 1 common frames omitted
[任务取消] 没有需要刷新的帖子!
[任务取消] 没有需要刷新的帖子!
[任务取消] 没有需要刷新的帖子!
[任务取消] 没有需要刷新的帖子!
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:36],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:36],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:36],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:36],访问了[com.bilibili.service.impl.DataServiceImpl.recordUV].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:36],访问了[com.bilibili.service.impl.DataServiceImpl.recordDau].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:36],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.findAllDiscussPost].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:36],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:36],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:36],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:36],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:36],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:36],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:36],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:36],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:36],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:36],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:36],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:36],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:36],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:36],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:36],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:36],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:36],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:36],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:36],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:36],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:36],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:37],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:37],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:37],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:37],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:37],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:37],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:37],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:37],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:37],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:37],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:37],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:37],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:37],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:37],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:37],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:37],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:37],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:37],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:37],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:37],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:37],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:37],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:37],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:37],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:37],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:37],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:53],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:53],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:53],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:53],访问了[com.bilibili.service.impl.DataServiceImpl.recordUV].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:53],访问了[com.bilibili.service.impl.DataServiceImpl.recordDau].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:53],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.findAllDiscussPost].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:53],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:53],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:53],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:53],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:53],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:53],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:53],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:53],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:53],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:53],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:53],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:53],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:53],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:53],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:53],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:53],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:53],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:53],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:53],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:53],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:53],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:53],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:53],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:53],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:53],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:53],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:53],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:53],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:53],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:53],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:53],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:53],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:53],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:53],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:53],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:53],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:53],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:53],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:53],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:53],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:53],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:53],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:53],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:53],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:53],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:53],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:13:53],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:37],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:37],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:37],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:37],访问了[com.bilibili.service.impl.DataServiceImpl.recordUV].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:37],访问了[com.bilibili.service.impl.DataServiceImpl.recordDau].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:37],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.findAllDiscussPost].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:37],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:37],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:37],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:37],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:37],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:37],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:37],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:37],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:37],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:37],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:37],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:37],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:37],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:37],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:37],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:37],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:37],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:37],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:37],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:37],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:37],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:37],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:37],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:37],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:37],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:37],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:37],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:37],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:37],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:37],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:37],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:37],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:37],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:37],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:37],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:37],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:37],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:37],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:37],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:37],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:37],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:37],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:37],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:37],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:37],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:37],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:37],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:40],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:40],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:40],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:40],访问了[com.bilibili.service.impl.DataServiceImpl.recordUV].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:40],访问了[com.bilibili.service.impl.DataServiceImpl.recordDau].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:40],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.findAllDiscussPost].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:40],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:40],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:40],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:40],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:40],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:40],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:40],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:40],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:40],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:40],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:40],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:40],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:40],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:40],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:40],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:40],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:40],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:40],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:40],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:40],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:40],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:40],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:40],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:40],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:40],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:40],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:40],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:40],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:40],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:40],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:40],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:40],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:40],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:40],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:40],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:40],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:40],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:40],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:40],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:40],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:40],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:40],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:40],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:40],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:40],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:40],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:40],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:41],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:41],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:41],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:41],访问了[com.bilibili.service.impl.DataServiceImpl.recordUV].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:41],访问了[com.bilibili.service.impl.DataServiceImpl.recordDau].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:41],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.findAllDiscussPost].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:41],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:41],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:41],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:41],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:41],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:41],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:41],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:41],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:41],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:41],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:41],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:41],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:41],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:41],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:41],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:41],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:41],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:41],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:41],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:41],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:41],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:41],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:41],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:41],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:41],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:41],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:41],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:41],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:41],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:41],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:41],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:41],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:41],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:41],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:41],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:41],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:41],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:41],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:41],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:41],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:41],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:41],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:41],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:41],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:41],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:41],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:41],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:43],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:43],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:43],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:43],访问了[com.bilibili.service.impl.DataServiceImpl.recordUV].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:43],访问了[com.bilibili.service.impl.DataServiceImpl.recordDau].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:43],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.getDiscussPostById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:43],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:43],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:43],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:43],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:43],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:43],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:43],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:43],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:43],访问了[com.bilibili.service.impl.CommentServiceImpl.CommentCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:43],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:43],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:58],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:58],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:58],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:58],访问了[com.bilibili.service.impl.DataServiceImpl.recordUV].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:58],访问了[com.bilibili.service.impl.DataServiceImpl.recordDau].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:58],访问了[com.bilibili.service.impl.CommentServiceImpl.addComment].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:58],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.updateDiscussionComment].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:58],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.getDiscussPostById].
普通service方法
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:58],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
普通service方法
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:58],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
普通service方法
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:58],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:58],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:58],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:58],访问了[com.bilibili.service.impl.DataServiceImpl.recordUV].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:58],访问了[com.bilibili.service.impl.DataServiceImpl.recordDau].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:58],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.getDiscussPostById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:58],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:58],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:58],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:58],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:58],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:58],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:58],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:58],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:58],访问了[com.bilibili.service.impl.CommentServiceImpl.CommentCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:58],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:58],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:58],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:58],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:58],访问了[com.bilibili.service.impl.CommentServiceImpl.CommentCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:58],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:14:58],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:01],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:01],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:01],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:01],访问了[com.bilibili.service.impl.DataServiceImpl.recordUV].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:01],访问了[com.bilibili.service.impl.DataServiceImpl.recordDau].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:01],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.findAllDiscussPost].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:01],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:01],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:01],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:01],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:01],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:01],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:01],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:01],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:01],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:01],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:01],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:01],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:01],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:01],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:01],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:01],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:01],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:01],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:01],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:01],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:01],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:01],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:01],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:01],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:01],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:01],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:01],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:01],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:01],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:01],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:01],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:01],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:01],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:01],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:01],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:01],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:01],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:01],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:01],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:01],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:01],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:01],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:01],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:01],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:01],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:01],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:01],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:03],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:03],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:03],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:03],访问了[com.bilibili.service.impl.DataServiceImpl.recordUV].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:03],访问了[com.bilibili.service.impl.DataServiceImpl.recordDau].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:03],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.findAllDiscussPost].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:03],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:03],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:03],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:03],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:03],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:03],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:03],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:03],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:03],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:03],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:03],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:03],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:03],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:03],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:03],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:03],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:03],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:03],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:03],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:03],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:03],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:03],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:03],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:03],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:03],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:03],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:03],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:03],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:03],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:03],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:03],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:03],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:03],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:03],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:03],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:03],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:03],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:03],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:03],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:03],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:03],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:03],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:03],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:03],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:03],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:03],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:03],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:06],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:06],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:06],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:06],访问了[com.bilibili.service.impl.DataServiceImpl.recordUV].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:06],访问了[com.bilibili.service.impl.DataServiceImpl.recordDau].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:06],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.findAllDiscussPost].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:06],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:06],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:06],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:06],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:06],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:06],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:06],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:06],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:06],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:06],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:06],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:06],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:06],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:06],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:06],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:06],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:06],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:06],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:06],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:06],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:06],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:06],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:06],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:06],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:06],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:06],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:06],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:06],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:06],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:06],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:06],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:06],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:06],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:06],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:06],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:06],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:06],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:06],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:06],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:06],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:06],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:06],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:06],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:06],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:06],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:06],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:15:06],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
[任务开始] 正在刷新帖子分数: 1
Job communityJobGroup.postScoreRefreshJob threw an unhandled Exception: 
java.lang.ClassCastException: java.lang.String cannot be cast to java.lang.Integer
	at com.bilibili.quartz.PostScoreRefreshJob.execute(PostScoreRefreshJob.java:54)
	at org.quartz.core.JobRunShell.run(JobRunShell.java:202)
	at org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:573)
Job (communityJobGroup.postScoreRefreshJob threw an exception.
org.quartz.SchedulerException: Job threw an unhandled exception.
	at org.quartz.core.JobRunShell.run(JobRunShell.java:213)
	at org.quartz.simpl.SimpleThreadPool$WorkerThread.run(SimpleThreadPool.java:573)
Caused by: java.lang.ClassCastException: java.lang.String cannot be cast to java.lang.Integer
	at com.bilibili.quartz.PostScoreRefreshJob.execute(PostScoreRefreshJob.java:54)
	at org.quartz.core.JobRunShell.run(JobRunShell.java:202)
	... 1 common frames omitted
[任务取消] 没有需要刷新的帖子!
[任务取消] 没有需要刷新的帖子!
Starting CommunityApplication on DESKTOP-QPE2857 with PID 13596 (started by 北极光。 in D:\编程\community)
No active profile set, falling back to default profiles: default
Devtools property defaults active! Set 'spring.devtools.add-properties' to 'false' to disable
For additional web related logging consider setting the 'logging.level.web' property to 'DEBUG'
Multiple Spring Data modules found, entering strict repository configuration mode!
Bootstrapping Spring Data repositories in DEFAULT mode.
Finished Spring Data repository scanning in 78ms. Found 1 repository interfaces.
Multiple Spring Data modules found, entering strict repository configuration mode!
Bootstrapping Spring Data repositories in DEFAULT mode.
Spring Data Redis - Could not safely identify store assignment for repository candidate interface com.bilibili.mapper.ElasticsearchMapper.
Finished Spring Data repository scanning in 9ms. Found 0 repository interfaces.
Bean 'org.springframework.kafka.annotation.KafkaBootstrapConfiguration' of type [org.springframework.kafka.annotation.KafkaBootstrapConfiguration$$EnhancerBySpringCGLIB$$251db637] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Bean 'org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration' of type [org.springframework.transaction.annotation.ProxyTransactionManagementConfiguration$$EnhancerBySpringCGLIB$$516ba4b4] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
Tomcat initialized with port(s): 8989 (http)
Initializing ProtocolHandler ["http-nio-8989"]
Starting service [Tomcat]
Starting Servlet engine: [Apache Tomcat/9.0.19]
Loaded APR based Apache Tomcat Native library [1.2.23] using APR version [1.7.0].
APR capabilities: IPv6 [true], sendfile [true], accept filters [false], random [true].
APR/OpenSSL configuration: useAprConnector [false], useOpenSSL [true]
OpenSSL successfully initialized [OpenSSL 1.1.1c  28 May 2019]
Initializing Spring embedded WebApplicationContext
Root WebApplicationContext: initialization completed in 2735 ms
no modules loaded
loaded plugin [org.elasticsearch.index.reindex.ReindexPlugin]
loaded plugin [org.elasticsearch.join.ParentJoinPlugin]
loaded plugin [org.elasticsearch.percolator.PercolatorPlugin]
loaded plugin [org.elasticsearch.script.mustache.MustachePlugin]
loaded plugin [org.elasticsearch.transport.Netty4Plugin]
Adding transport node : 127.0.0.1:9300
LiveReload server is running on port 35729
Initializing ExecutorService 'applicationTaskExecutor'
Adding welcome page template: index
{dataSource-1} inited
Using default implementation for ThreadExecutor
Initialized Scheduler Signaller of type: class org.quartz.core.SchedulerSignalerImpl
Quartz Scheduler v.2.3.1 created.
Using db table-based data access locking (synchronization).
JobStoreCMT initialized.
Scheduler meta-data: Quartz Scheduler (v2.3.1) 'communityScheduler' with instanceId 'DESKTOP-QPE28571605454155510'
  Scheduler class: 'org.quartz.core.QuartzScheduler' - running locally.
  NOT STARTED.
  Currently in standby mode.
  Number of jobs executed: 0
  Using thread pool 'org.quartz.simpl.SimpleThreadPool' - with 5 threads.
  Using job-store 'org.springframework.scheduling.quartz.LocalDataSourceJobStore' - which supports persistence. and is clustered.

Quartz scheduler 'communityScheduler' initialized from an externally provided properties instance.
Quartz scheduler version: 2.3.1
JobFactory set to: org.springframework.scheduling.quartz.SpringBeanJobFactory@b3185ee


Using generated security password: 1ef6c98b-69fc-4238-8b1a-2c7bb3c40132

Creating filter chain: Ant [pattern='/resources/**'], []
Creating filter chain: any request, [org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter@58e66319, org.springframework.security.web.context.SecurityContextPersistenceFilter@bd4d1b6, org.springframework.security.web.header.HeaderWriterFilter@6a78a265, org.springframework.security.web.authentication.logout.LogoutFilter@29737f45, org.springframework.security.web.savedrequest.RequestCacheAwareFilter@5994b5de, org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter@3e2d0b8a, org.springframework.security.web.authentication.AnonymousAuthenticationFilter@4150c49b, org.springframework.security.web.session.SessionManagementFilter@149ff682, org.springframework.security.web.access.ExceptionTranslationFilter@5cbb2e19, org.springframework.security.web.access.intercept.FilterSecurityInterceptor@6cf527d2]
ConsumerConfig values: 
	auto.commit.interval.ms = 3000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.id = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = true
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = community-consumer-group
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	session.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

Kafka version : 2.0.1
Kafka commitId : fa14705e51bd2ce5
Cluster ID: QO7D4advRRq2h8kiil_eJw
ConsumerConfig values: 
	auto.commit.interval.ms = 3000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.id = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = true
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = community-consumer-group
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	session.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

Kafka version : 2.0.1
Kafka commitId : fa14705e51bd2ce5
Initializing ExecutorService
ConsumerConfig values: 
	auto.commit.interval.ms = 3000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.id = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = true
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = community-consumer-group
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	session.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

Kafka version : 2.0.1
Kafka commitId : fa14705e51bd2ce5
Cluster ID: QO7D4advRRq2h8kiil_eJw
[Consumer clientId=consumer-2, groupId=community-consumer-group] Discovered group coordinator DESKTOP-QPE2857:9092 (id: 2147483647 rack: null)
Cluster ID: QO7D4advRRq2h8kiil_eJw
[Consumer clientId=consumer-2, groupId=community-consumer-group] Revoking previously assigned partitions []
partitions revoked: []
[Consumer clientId=consumer-2, groupId=community-consumer-group] (Re-)joining group
ConsumerConfig values: 
	auto.commit.interval.ms = 3000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.id = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = true
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = community-consumer-group
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	session.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

Kafka version : 2.0.1
Kafka commitId : fa14705e51bd2ce5
Initializing ExecutorService
ConsumerConfig values: 
	auto.commit.interval.ms = 3000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.id = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = true
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = community-consumer-group
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	session.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

Cluster ID: QO7D4advRRq2h8kiil_eJw
[Consumer clientId=consumer-4, groupId=community-consumer-group] Discovered group coordinator DESKTOP-QPE2857:9092 (id: 2147483647 rack: null)
Kafka version : 2.0.1
Kafka commitId : fa14705e51bd2ce5
[Consumer clientId=consumer-4, groupId=community-consumer-group] Revoking previously assigned partitions []
partitions revoked: []
[Consumer clientId=consumer-4, groupId=community-consumer-group] (Re-)joining group
Cluster ID: QO7D4advRRq2h8kiil_eJw
[Consumer clientId=consumer-2, groupId=community-consumer-group] Successfully joined group with generation 4
[Consumer clientId=consumer-2, groupId=community-consumer-group] Setting newly assigned partitions [comment-0, like-0, follow-0]
ConsumerConfig values: 
	auto.commit.interval.ms = 3000
	auto.offset.reset = latest
	bootstrap.servers = [localhost:9092]
	check.crcs = true
	client.id = 
	connections.max.idle.ms = 540000
	default.api.timeout.ms = 60000
	enable.auto.commit = true
	exclude.internal.topics = true
	fetch.max.bytes = 52428800
	fetch.max.wait.ms = 500
	fetch.min.bytes = 1
	group.id = community-consumer-group
	heartbeat.interval.ms = 3000
	interceptor.classes = []
	internal.leave.group.on.close = true
	isolation.level = read_uncommitted
	key.deserializer = class org.apache.kafka.common.serialization.StringDeserializer
	max.partition.fetch.bytes = 1048576
	max.poll.interval.ms = 300000
	max.poll.records = 500
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partition.assignment.strategy = [class org.apache.kafka.clients.consumer.RangeAssignor]
	receive.buffer.bytes = 65536
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	session.timeout.ms = 10000
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	value.deserializer = class org.apache.kafka.common.serialization.StringDeserializer

partitions assigned: [comment-0, like-0, follow-0]
Kafka version : 2.0.1
Kafka commitId : fa14705e51bd2ce5
Initializing ExecutorService
Starting Quartz Scheduler now
Cluster ID: QO7D4advRRq2h8kiil_eJw
[Consumer clientId=consumer-6, groupId=community-consumer-group] Discovered group coordinator DESKTOP-QPE2857:9092 (id: 2147483647 rack: null)
[Consumer clientId=consumer-6, groupId=community-consumer-group] Revoking previously assigned partitions []
partitions revoked: []
[Consumer clientId=consumer-6, groupId=community-consumer-group] (Re-)joining group
ClusterManager: detected 1 failed or restarted instances.
ClusterManager: Scanning for instance "DESKTOP-QPE28571605451594518"'s failed in-progress jobs.
Scheduler communityScheduler_$_DESKTOP-QPE28571605454155510 started.
Starting ProtocolHandler ["http-nio-8989"]
Tomcat started on port(s): 8989 (http) with context path '/community'
Started CommunityApplication in 14.556 seconds (JVM running for 15.785)
[Consumer clientId=consumer-2, groupId=community-consumer-group] Attempt to heartbeat failed since group is rebalancing
[Consumer clientId=consumer-2, groupId=community-consumer-group] Revoking previously assigned partitions [comment-0, like-0, follow-0]
partitions revoked: [comment-0, like-0, follow-0]
[Consumer clientId=consumer-2, groupId=community-consumer-group] (Re-)joining group
[Consumer clientId=consumer-6, groupId=community-consumer-group] Successfully joined group with generation 5
[Consumer clientId=consumer-2, groupId=community-consumer-group] Successfully joined group with generation 5
[Consumer clientId=consumer-4, groupId=community-consumer-group] Successfully joined group with generation 5
[Consumer clientId=consumer-6, groupId=community-consumer-group] Setting newly assigned partitions [delete-0]
[Consumer clientId=consumer-2, groupId=community-consumer-group] Setting newly assigned partitions [comment-0, like-0, follow-0]
[Consumer clientId=consumer-4, groupId=community-consumer-group] Setting newly assigned partitions [publish-0]
partitions assigned: [comment-0, like-0, follow-0]
partitions assigned: [publish-0]
partitions assigned: [delete-0]
Initializing Spring DispatcherServlet 'dispatcherServlet'
Initializing Servlet 'dispatcherServlet'
Completed initialization in 17 ms
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:22],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
Starting without optional epoll library
Starting without optional kqueue library
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:22],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:22],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:22],访问了[com.bilibili.service.impl.DataServiceImpl.recordUV].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:22],访问了[com.bilibili.service.impl.DataServiceImpl.recordDau].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:22],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.findAllDiscussPost].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:23],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:23],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:23],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:23],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:23],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:23],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:23],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:23],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:23],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:23],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:23],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:23],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:23],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:23],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:23],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:23],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:23],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:23],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:23],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:23],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:23],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:23],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:23],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:23],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:23],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:23],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:23],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:23],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:23],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:23],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:23],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:23],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:23],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:23],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:23],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:23],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:23],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:23],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:23],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:23],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:23],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:23],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:23],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:23],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:23],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:23],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:23],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:27],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:27],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:27],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:27],访问了[com.bilibili.service.impl.DataServiceImpl.recordUV].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:27],访问了[com.bilibili.service.impl.DataServiceImpl.recordDau].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:27],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.findAllDiscussPost].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:27],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:27],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:27],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:27],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:27],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:27],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:27],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:27],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:27],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:27],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:27],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:27],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:27],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:27],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:27],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:27],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:27],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:27],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:27],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:27],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:27],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:27],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:27],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:27],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:27],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:27],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:27],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:27],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:27],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:27],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:27],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:27],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:27],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:27],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:27],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:27],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:27],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:27],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:27],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:27],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:27],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:27],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:27],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:27],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:27],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:27],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:27],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:51],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:51],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:51],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:51],访问了[com.bilibili.service.impl.DataServiceImpl.recordUV].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:51],访问了[com.bilibili.service.impl.DataServiceImpl.recordDau].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:51],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.findAllDiscussPost].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:51],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:51],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:51],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:51],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:51],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:51],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:51],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:51],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:51],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:51],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:51],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:51],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:51],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:51],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:51],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:51],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:51],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:51],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:51],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:51],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:51],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:51],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:51],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:51],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:51],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:51],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:51],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:51],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:51],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:51],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:51],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:51],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:51],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:51],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:51],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:51],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:51],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:51],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:51],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:51],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:51],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:51],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:51],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:51],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:51],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:51],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:51],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:53],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:53],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:53],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:53],访问了[com.bilibili.service.impl.DataServiceImpl.recordUV].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:53],访问了[com.bilibili.service.impl.DataServiceImpl.recordDau].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:53],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.getDiscussPostById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:53],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:53],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:53],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:53],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:53],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:53],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:53],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:53],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:53],访问了[com.bilibili.service.impl.CommentServiceImpl.CommentCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:53],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:53],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:53],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:53],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:53],访问了[com.bilibili.service.impl.CommentServiceImpl.CommentCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:53],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:29:53],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:30:05],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:30:05],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:30:05],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:30:05],访问了[com.bilibili.service.impl.DataServiceImpl.recordUV].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:30:05],访问了[com.bilibili.service.impl.DataServiceImpl.recordDau].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:30:05],访问了[com.bilibili.service.impl.CommentServiceImpl.addComment].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:30:05],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.updateDiscussionComment].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:30:05],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.getDiscussPostById].
ProducerConfig values: 
	acks = 1
	batch.size = 16384
	bootstrap.servers = [localhost:9092]
	buffer.memory = 33554432
	client.id = 
	compression.type = none
	connections.max.idle.ms = 540000
	enable.idempotence = false
	interceptor.classes = []
	key.serializer = class org.apache.kafka.common.serialization.StringSerializer
	linger.ms = 0
	max.block.ms = 60000
	max.in.flight.requests.per.connection = 5
	max.request.size = 1048576
	metadata.max.age.ms = 300000
	metric.reporters = []
	metrics.num.samples = 2
	metrics.recording.level = INFO
	metrics.sample.window.ms = 30000
	partitioner.class = class org.apache.kafka.clients.producer.internals.DefaultPartitioner
	receive.buffer.bytes = 32768
	reconnect.backoff.max.ms = 1000
	reconnect.backoff.ms = 50
	request.timeout.ms = 30000
	retries = 0
	retry.backoff.ms = 100
	sasl.client.callback.handler.class = null
	sasl.jaas.config = null
	sasl.kerberos.kinit.cmd = /usr/bin/kinit
	sasl.kerberos.min.time.before.relogin = 60000
	sasl.kerberos.service.name = null
	sasl.kerberos.ticket.renew.jitter = 0.05
	sasl.kerberos.ticket.renew.window.factor = 0.8
	sasl.login.callback.handler.class = null
	sasl.login.class = null
	sasl.login.refresh.buffer.seconds = 300
	sasl.login.refresh.min.period.seconds = 60
	sasl.login.refresh.window.factor = 0.8
	sasl.login.refresh.window.jitter = 0.05
	sasl.mechanism = GSSAPI
	security.protocol = PLAINTEXT
	send.buffer.bytes = 131072
	ssl.cipher.suites = null
	ssl.enabled.protocols = [TLSv1.2, TLSv1.1, TLSv1]
	ssl.endpoint.identification.algorithm = https
	ssl.key.password = null
	ssl.keymanager.algorithm = SunX509
	ssl.keystore.location = null
	ssl.keystore.password = null
	ssl.keystore.type = JKS
	ssl.protocol = TLS
	ssl.provider = null
	ssl.secure.random.implementation = null
	ssl.trustmanager.algorithm = PKIX
	ssl.truststore.location = null
	ssl.truststore.password = null
	ssl.truststore.type = JKS
	transaction.timeout.ms = 60000
	transactional.id = null
	value.serializer = class org.apache.kafka.common.serialization.StringSerializer

Kafka version : 2.0.1
Kafka commitId : fa14705e51bd2ce5
Cluster ID: QO7D4advRRq2h8kiil_eJw
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:30:05],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:30:05],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
普通service方法
普通service方法
普通service方法
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:30:05],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:30:05],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:30:05],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:30:05],访问了[com.bilibili.service.impl.DataServiceImpl.recordUV].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:30:05],访问了[com.bilibili.service.impl.DataServiceImpl.recordDau].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:30:05],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.getDiscussPostById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:30:05],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:30:05],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:30:05],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:30:05],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:30:05],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:30:05],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:30:05],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:30:05],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:30:05],访问了[com.bilibili.service.impl.CommentServiceImpl.CommentCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:30:05],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:30:05],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:30:05],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:30:05],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:30:05],访问了[com.bilibili.service.impl.CommentServiceImpl.CommentCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:30:05],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:30:05],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:30:05],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:30:05],访问了[com.bilibili.service.impl.CommentServiceImpl.getComments].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:30:05],访问了[com.bilibili.service.impl.CommentServiceImpl.CommentCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:30:05],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:30:05],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
[任务开始] 正在刷新帖子分数: 1
普通service方法
普通service方法
普通service方法
普通service方法
[任务结束] 帖子分数刷新完毕!
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:24],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:24],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:24],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:24],访问了[com.bilibili.service.impl.DataServiceImpl.recordUV].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:24],访问了[com.bilibili.service.impl.DataServiceImpl.recordDau].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:24],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.findAllDiscussPost].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:24],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:24],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:24],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:24],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:24],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:24],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:24],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:24],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:24],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:24],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:24],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:24],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:24],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:24],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:24],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:24],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:24],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:24],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:24],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:24],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:24],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:24],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:24],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:24],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:24],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:24],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:24],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:24],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:24],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:24],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:24],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:24],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:24],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:24],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:24],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:24],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:24],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:24],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:24],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:24],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:24],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:24],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:24],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:24],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:24],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:24],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:24],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:25],访问了[com.bilibili.service.impl.UserServiceImpl.findLoginTicket].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:25],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:25],访问了[com.bilibili.service.impl.UserServiceImpl.getAuthorities].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:25],访问了[com.bilibili.service.impl.DataServiceImpl.recordUV].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:25],访问了[com.bilibili.service.impl.DataServiceImpl.recordDau].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:25],访问了[com.bilibili.service.impl.DiscussPostServiceImpl.findAllDiscussPost].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:25],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:25],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:25],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:25],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:25],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:25],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:25],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:25],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:25],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:25],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:25],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:25],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:25],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:25],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:25],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:25],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:25],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:25],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:25],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:25],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:25],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:25],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:25],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:25],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:25],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:25],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:25],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:25],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:25],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:25],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:25],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:25],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:25],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:25],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:25],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:25],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:25],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:25],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:25],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:25],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:25],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:25],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:25],访问了[com.bilibili.service.impl.UserServiceImpl.getUserById].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:25],访问了[com.bilibili.service.impl.LickServiceImpl.LikeCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:25],访问了[com.bilibili.service.impl.LickServiceImpl.LinkStatus].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:25],访问了[com.bilibili.service.impl.MessageServiceImpl.getAllLettersUnreadCount].
用户[0:0:0:0:0:0:0:1],在[2020-11-15 23:34:25],访问了[com.bilibili.service.impl.MessageServiceImpl.getUnreadNoticeCount].
